// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package api

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson6601e8cdDecodeGithubComChris124567FifaApi(in *jlexer.Lexer, out *WatchlistResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "total":
			out.Total = int(in.Int())
		case "credits":
			out.Credits = int(in.Int())
		case "auctionInfo":
			if in.IsNull() {
				in.Skip()
				out.AuctionInfo = nil
			} else {
				in.Delim('[')
				if out.AuctionInfo == nil {
					if !in.IsDelim(']') {
						out.AuctionInfo = make([]AuctionInfo, 0, 0)
					} else {
						out.AuctionInfo = []AuctionInfo{}
					}
				} else {
					out.AuctionInfo = (out.AuctionInfo)[:0]
				}
				for !in.IsDelim(']') {
					var v1 AuctionInfo
					(v1).UnmarshalEasyJSON(in)
					out.AuctionInfo = append(out.AuctionInfo, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComChris124567FifaApi(out *jwriter.Writer, in WatchlistResponse) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Total != 0 {
		const prefix string = ",\"total\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.Total))
	}
	if in.Credits != 0 {
		const prefix string = ",\"credits\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Credits))
	}
	if len(in.AuctionInfo) != 0 {
		const prefix string = ",\"auctionInfo\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v2, v3 := range in.AuctionInfo {
				if v2 > 0 {
					out.RawByte(',')
				}
				(v3).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v WatchlistResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComChris124567FifaApi(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WatchlistResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComChris124567FifaApi(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *WatchlistResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComChris124567FifaApi(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WatchlistResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComChris124567FifaApi(l, v)
}
func easyjson6601e8cdDecodeGithubComChris124567FifaApi1(in *jlexer.Lexer, out *UtAuthResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "protocol":
			out.Protocol = string(in.String())
		case "ipPort":
			out.IPPort = string(in.String())
		case "serverTime":
			out.ServerTime = string(in.String())
		case "lastOnlineTime":
			out.LastOnlineTime = string(in.String())
		case "sid":
			out.Sid = string(in.String())
		case "phishingToken":
			out.PhishingToken = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComChris124567FifaApi1(out *jwriter.Writer, in UtAuthResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"protocol\":"
		out.RawString(prefix[1:])
		out.String(string(in.Protocol))
	}
	{
		const prefix string = ",\"ipPort\":"
		out.RawString(prefix)
		out.String(string(in.IPPort))
	}
	{
		const prefix string = ",\"serverTime\":"
		out.RawString(prefix)
		out.String(string(in.ServerTime))
	}
	{
		const prefix string = ",\"lastOnlineTime\":"
		out.RawString(prefix)
		out.String(string(in.LastOnlineTime))
	}
	{
		const prefix string = ",\"sid\":"
		out.RawString(prefix)
		out.String(string(in.Sid))
	}
	{
		const prefix string = ",\"phishingToken\":"
		out.RawString(prefix)
		out.String(string(in.PhishingToken))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UtAuthResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComChris124567FifaApi1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UtAuthResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComChris124567FifaApi1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UtAuthResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComChris124567FifaApi1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UtAuthResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComChris124567FifaApi1(l, v)
}
func easyjson6601e8cdDecodeGithubComChris124567FifaApi2(in *jlexer.Lexer, out *UtAuthRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "clientVersion":
			out.ClientVersion = int(in.Int())
		case "ds":
			out.Ds = string(in.String())
		case "gameSku":
			out.GameSku = string(in.String())
		case "identification":
			easyjson6601e8cdDecode(in, &out.Identification)
		case "isReadOnly":
			out.IsReadOnly = bool(in.Bool())
		case "locale":
			out.Locale = string(in.String())
		case "method":
			out.Method = string(in.String())
		case "nucleusPersonaId":
			out.NucleusPersonaID = int64(in.Int64())
		case "priorityLevel":
			out.PriorityLevel = int(in.Int())
		case "sku":
			out.SKU = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComChris124567FifaApi2(out *jwriter.Writer, in UtAuthRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"clientVersion\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ClientVersion))
	}
	{
		const prefix string = ",\"ds\":"
		out.RawString(prefix)
		out.String(string(in.Ds))
	}
	{
		const prefix string = ",\"gameSku\":"
		out.RawString(prefix)
		out.String(string(in.GameSku))
	}
	{
		const prefix string = ",\"identification\":"
		out.RawString(prefix)
		easyjson6601e8cdEncode(out, in.Identification)
	}
	{
		const prefix string = ",\"isReadOnly\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsReadOnly))
	}
	{
		const prefix string = ",\"locale\":"
		out.RawString(prefix)
		out.String(string(in.Locale))
	}
	{
		const prefix string = ",\"method\":"
		out.RawString(prefix)
		out.String(string(in.Method))
	}
	{
		const prefix string = ",\"nucleusPersonaId\":"
		out.RawString(prefix)
		out.Int64(int64(in.NucleusPersonaID))
	}
	{
		const prefix string = ",\"priorityLevel\":"
		out.RawString(prefix)
		out.Int(int(in.PriorityLevel))
	}
	{
		const prefix string = ",\"sku\":"
		out.RawString(prefix)
		out.String(string(in.SKU))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UtAuthRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComChris124567FifaApi2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UtAuthRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComChris124567FifaApi2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UtAuthRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComChris124567FifaApi2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UtAuthRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComChris124567FifaApi2(l, v)
}
func easyjson6601e8cdDecode(in *jlexer.Lexer, out *struct {
	AuthCode    string `json:"authCode"`
	RedirectURL string `json:"redirectUrl"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "authCode":
			out.AuthCode = string(in.String())
		case "redirectUrl":
			out.RedirectURL = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncode(out *jwriter.Writer, in struct {
	AuthCode    string `json:"authCode"`
	RedirectURL string `json:"redirectUrl"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"authCode\":"
		out.RawString(prefix[1:])
		out.String(string(in.AuthCode))
	}
	{
		const prefix string = ",\"redirectUrl\":"
		out.RawString(prefix)
		out.String(string(in.RedirectURL))
	}
	out.RawByte('}')
}
func easyjson6601e8cdDecodeGithubComChris124567FifaApi3(in *jlexer.Lexer, out *UserMassInfoResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "errors":
			(out.Errors).UnmarshalEasyJSON(in)
		case "settings":
			(out.Settings).UnmarshalEasyJSON(in)
		case "userInfo":
			(out.UserInfo).UnmarshalEasyJSON(in)
		case "purchasedItems":
			(out.PurchasedItems).UnmarshalEasyJSON(in)
		case "loanPlayerClientData":
			(out.LoanPlayerClientData).UnmarshalEasyJSON(in)
		case "squad":
			(out.Squad).UnmarshalEasyJSON(in)
		case "clubUser":
			(out.ClubUser).UnmarshalEasyJSON(in)
		case "activeMessages":
			(out.ActiveMessages).UnmarshalEasyJSON(in)
		case "onboardingClientData":
			(out.OnboardingClientData).UnmarshalEasyJSON(in)
		case "isHighTierReturningUser":
			out.IsHighTierReturningUser = bool(in.Bool())
		case "isPlayerPicksTemporaryStorageNotEmpty":
			out.IsPlayerPicksTemporaryStorageNotEmpty = bool(in.Bool())
		case "ltpEventsHubData":
			(out.LtpEventsHubData).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComChris124567FifaApi3(out *jwriter.Writer, in UserMassInfoResponse) {
	out.RawByte('{')
	first := true
	_ = first
	if true {
		const prefix string = ",\"errors\":"
		first = false
		out.RawString(prefix[1:])
		(in.Errors).MarshalEasyJSON(out)
	}
	if true {
		const prefix string = ",\"settings\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Settings).MarshalEasyJSON(out)
	}
	if true {
		const prefix string = ",\"userInfo\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.UserInfo).MarshalEasyJSON(out)
	}
	if true {
		const prefix string = ",\"purchasedItems\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.PurchasedItems).MarshalEasyJSON(out)
	}
	if true {
		const prefix string = ",\"loanPlayerClientData\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.LoanPlayerClientData).MarshalEasyJSON(out)
	}
	if true {
		const prefix string = ",\"squad\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Squad).MarshalEasyJSON(out)
	}
	if true {
		const prefix string = ",\"clubUser\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.ClubUser).MarshalEasyJSON(out)
	}
	if true {
		const prefix string = ",\"activeMessages\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.ActiveMessages).MarshalEasyJSON(out)
	}
	if true {
		const prefix string = ",\"onboardingClientData\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.OnboardingClientData).MarshalEasyJSON(out)
	}
	if in.IsHighTierReturningUser {
		const prefix string = ",\"isHighTierReturningUser\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.IsHighTierReturningUser))
	}
	if in.IsPlayerPicksTemporaryStorageNotEmpty {
		const prefix string = ",\"isPlayerPicksTemporaryStorageNotEmpty\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.IsPlayerPicksTemporaryStorageNotEmpty))
	}
	if true {
		const prefix string = ",\"ltpEventsHubData\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.LtpEventsHubData).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UserMassInfoResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComChris124567FifaApi3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UserMassInfoResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComChris124567FifaApi3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UserMassInfoResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComChris124567FifaApi3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UserMassInfoResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComChris124567FifaApi3(l, v)
}
func easyjson6601e8cdDecodeGithubComChris124567FifaApi4(in *jlexer.Lexer, out *UserInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "personaId":
			out.PersonaID = int64(in.Int64())
		case "clubName":
			out.ClubName = string(in.String())
		case "clubAbbr":
			out.ClubAbbr = string(in.String())
		case "draw":
			out.Draw = int(in.Int())
		case "loss":
			out.Loss = int(in.Int())
		case "credits":
			out.Credits = int(in.Int())
		case "bidTokens":
			(out.BidTokens).UnmarshalEasyJSON(in)
		case "currencies":
			if in.IsNull() {
				in.Skip()
				out.Currencies = nil
			} else {
				in.Delim('[')
				if out.Currencies == nil {
					if !in.IsDelim(']') {
						out.Currencies = make([]Currencies, 0, 2)
					} else {
						out.Currencies = []Currencies{}
					}
				} else {
					out.Currencies = (out.Currencies)[:0]
				}
				for !in.IsDelim(']') {
					var v4 Currencies
					(v4).UnmarshalEasyJSON(in)
					out.Currencies = append(out.Currencies, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "trophies":
			out.Trophies = int(in.Int())
		case "won":
			out.Won = int(in.Int())
		case "actives":
			if in.IsNull() {
				in.Skip()
				out.Actives = nil
			} else {
				in.Delim('[')
				if out.Actives == nil {
					if !in.IsDelim(']') {
						out.Actives = make([]Actives, 0, 0)
					} else {
						out.Actives = []Actives{}
					}
				} else {
					out.Actives = (out.Actives)[:0]
				}
				for !in.IsDelim(']') {
					var v5 Actives
					(v5).UnmarshalEasyJSON(in)
					out.Actives = append(out.Actives, v5)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "established":
			out.Established = string(in.String())
		case "divisionOffline":
			out.DivisionOffline = int(in.Int())
		case "divisionOnline":
			out.DivisionOnline = int(in.Int())
		case "personaName":
			out.PersonaName = string(in.String())
		case "squadList":
			(out.SquadList).UnmarshalEasyJSON(in)
		case "unopenedPacks":
			(out.UnopenedPacks).UnmarshalEasyJSON(in)
		case "purchased":
			out.Purchased = bool(in.Bool())
		case "reliability":
			(out.Reliability).UnmarshalEasyJSON(in)
		case "seasonTicket":
			out.SeasonTicket = bool(in.Bool())
		case "accountCreatedPlatformName":
			out.AccountCreatedPlatformName = string(in.String())
		case "unassignedPileSize":
			out.UnassignedPileSize = int(in.Int())
		case "feature":
			(out.Feature).UnmarshalEasyJSON(in)
		case "sessionCoinsBankBalance":
			out.SessionCoinsBankBalance = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComChris124567FifaApi4(out *jwriter.Writer, in UserInfo) {
	out.RawByte('{')
	first := true
	_ = first
	if in.PersonaID != 0 {
		const prefix string = ",\"personaId\":"
		first = false
		out.RawString(prefix[1:])
		out.Int64(int64(in.PersonaID))
	}
	if in.ClubName != "" {
		const prefix string = ",\"clubName\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ClubName))
	}
	if in.ClubAbbr != "" {
		const prefix string = ",\"clubAbbr\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ClubAbbr))
	}
	if in.Draw != 0 {
		const prefix string = ",\"draw\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Draw))
	}
	if in.Loss != 0 {
		const prefix string = ",\"loss\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Loss))
	}
	if in.Credits != 0 {
		const prefix string = ",\"credits\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Credits))
	}
	if true {
		const prefix string = ",\"bidTokens\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.BidTokens).MarshalEasyJSON(out)
	}
	if len(in.Currencies) != 0 {
		const prefix string = ",\"currencies\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v6, v7 := range in.Currencies {
				if v6 > 0 {
					out.RawByte(',')
				}
				(v7).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if in.Trophies != 0 {
		const prefix string = ",\"trophies\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Trophies))
	}
	if in.Won != 0 {
		const prefix string = ",\"won\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Won))
	}
	if len(in.Actives) != 0 {
		const prefix string = ",\"actives\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v8, v9 := range in.Actives {
				if v8 > 0 {
					out.RawByte(',')
				}
				(v9).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if in.Established != "" {
		const prefix string = ",\"established\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Established))
	}
	if in.DivisionOffline != 0 {
		const prefix string = ",\"divisionOffline\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.DivisionOffline))
	}
	if in.DivisionOnline != 0 {
		const prefix string = ",\"divisionOnline\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.DivisionOnline))
	}
	if in.PersonaName != "" {
		const prefix string = ",\"personaName\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PersonaName))
	}
	if true {
		const prefix string = ",\"squadList\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.SquadList).MarshalEasyJSON(out)
	}
	if true {
		const prefix string = ",\"unopenedPacks\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.UnopenedPacks).MarshalEasyJSON(out)
	}
	if in.Purchased {
		const prefix string = ",\"purchased\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Purchased))
	}
	if true {
		const prefix string = ",\"reliability\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Reliability).MarshalEasyJSON(out)
	}
	if in.SeasonTicket {
		const prefix string = ",\"seasonTicket\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.SeasonTicket))
	}
	if in.AccountCreatedPlatformName != "" {
		const prefix string = ",\"accountCreatedPlatformName\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AccountCreatedPlatformName))
	}
	if in.UnassignedPileSize != 0 {
		const prefix string = ",\"unassignedPileSize\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.UnassignedPileSize))
	}
	if true {
		const prefix string = ",\"feature\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Feature).MarshalEasyJSON(out)
	}
	if in.SessionCoinsBankBalance != 0 {
		const prefix string = ",\"sessionCoinsBankBalance\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.SessionCoinsBankBalance))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UserInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComChris124567FifaApi4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UserInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComChris124567FifaApi4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UserInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComChris124567FifaApi4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UserInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComChris124567FifaApi4(l, v)
}
func easyjson6601e8cdDecodeGithubComChris124567FifaApi5(in *jlexer.Lexer, out *User) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "personaId":
			out.PersonaID = int64(in.Int64())
		case "persona":
			out.Persona = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComChris124567FifaApi5(out *jwriter.Writer, in User) {
	out.RawByte('{')
	first := true
	_ = first
	if in.PersonaID != 0 {
		const prefix string = ",\"personaId\":"
		first = false
		out.RawString(prefix[1:])
		out.Int64(int64(in.PersonaID))
	}
	if in.Persona != "" {
		const prefix string = ",\"persona\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Persona))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v User) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComChris124567FifaApi5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v User) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComChris124567FifaApi5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *User) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComChris124567FifaApi5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *User) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComChris124567FifaApi5(l, v)
}
func easyjson6601e8cdDecodeGithubComChris124567FifaApi6(in *jlexer.Lexer, out *UnopenedPacks) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "preOrderPacks":
			out.PreOrderPacks = int(in.Int())
		case "recoveredPacks":
			out.RecoveredPacks = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComChris124567FifaApi6(out *jwriter.Writer, in UnopenedPacks) {
	out.RawByte('{')
	first := true
	_ = first
	if in.PreOrderPacks != 0 {
		const prefix string = ",\"preOrderPacks\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.PreOrderPacks))
	}
	if in.RecoveredPacks != 0 {
		const prefix string = ",\"recoveredPacks\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.RecoveredPacks))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UnopenedPacks) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComChris124567FifaApi6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UnopenedPacks) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComChris124567FifaApi6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UnopenedPacks) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComChris124567FifaApi6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UnopenedPacks) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComChris124567FifaApi6(l, v)
}
func easyjson6601e8cdDecodeGithubComChris124567FifaApi7(in *jlexer.Lexer, out *TransferMarketResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "auctionInfo":
			if in.IsNull() {
				in.Skip()
				out.AuctionInfo = nil
			} else {
				in.Delim('[')
				if out.AuctionInfo == nil {
					if !in.IsDelim(']') {
						out.AuctionInfo = make([]AuctionInfo, 0, 0)
					} else {
						out.AuctionInfo = []AuctionInfo{}
					}
				} else {
					out.AuctionInfo = (out.AuctionInfo)[:0]
				}
				for !in.IsDelim(']') {
					var v10 AuctionInfo
					(v10).UnmarshalEasyJSON(in)
					out.AuctionInfo = append(out.AuctionInfo, v10)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "bidTokens":
			(out.BidTokens).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComChris124567FifaApi7(out *jwriter.Writer, in TransferMarketResponse) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.AuctionInfo) != 0 {
		const prefix string = ",\"auctionInfo\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('[')
			for v11, v12 := range in.AuctionInfo {
				if v11 > 0 {
					out.RawByte(',')
				}
				(v12).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if true {
		const prefix string = ",\"bidTokens\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.BidTokens).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TransferMarketResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComChris124567FifaApi7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TransferMarketResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComChris124567FifaApi7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TransferMarketResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComChris124567FifaApi7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TransferMarketResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComChris124567FifaApi7(l, v)
}
func easyjson6601e8cdDecodeGithubComChris124567FifaApi8(in *jlexer.Lexer, out *TradepileResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "credits":
			out.Credits = int(in.Int())
		case "auctionInfo":
			if in.IsNull() {
				in.Skip()
				out.AuctionInfo = nil
			} else {
				in.Delim('[')
				if out.AuctionInfo == nil {
					if !in.IsDelim(']') {
						out.AuctionInfo = make([]AuctionInfo, 0, 0)
					} else {
						out.AuctionInfo = []AuctionInfo{}
					}
				} else {
					out.AuctionInfo = (out.AuctionInfo)[:0]
				}
				for !in.IsDelim(']') {
					var v13 AuctionInfo
					(v13).UnmarshalEasyJSON(in)
					out.AuctionInfo = append(out.AuctionInfo, v13)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "bidTokens":
			(out.BidTokens).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComChris124567FifaApi8(out *jwriter.Writer, in TradepileResponse) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Credits != 0 {
		const prefix string = ",\"credits\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.Credits))
	}
	if len(in.AuctionInfo) != 0 {
		const prefix string = ",\"auctionInfo\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v14, v15 := range in.AuctionInfo {
				if v14 > 0 {
					out.RawByte(',')
				}
				(v15).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if true {
		const prefix string = ",\"bidTokens\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.BidTokens).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TradepileResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComChris124567FifaApi8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TradepileResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComChris124567FifaApi8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TradepileResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComChris124567FifaApi8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TradepileResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComChris124567FifaApi8(l, v)
}
func easyjson6601e8cdDecodeGithubComChris124567FifaApi9(in *jlexer.Lexer, out *TradeStatusResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "credits":
			out.Credits = int(in.Int())
		case "auctionInfo":
			if in.IsNull() {
				in.Skip()
				out.AuctionInfo = nil
			} else {
				in.Delim('[')
				if out.AuctionInfo == nil {
					if !in.IsDelim(']') {
						out.AuctionInfo = make([]AuctionInfo, 0, 0)
					} else {
						out.AuctionInfo = []AuctionInfo{}
					}
				} else {
					out.AuctionInfo = (out.AuctionInfo)[:0]
				}
				for !in.IsDelim(']') {
					var v16 AuctionInfo
					(v16).UnmarshalEasyJSON(in)
					out.AuctionInfo = append(out.AuctionInfo, v16)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "bidTokens":
			(out.BidTokens).UnmarshalEasyJSON(in)
		case "currencies":
			if in.IsNull() {
				in.Skip()
				out.Currencies = nil
			} else {
				in.Delim('[')
				if out.Currencies == nil {
					if !in.IsDelim(']') {
						out.Currencies = make([]Currencies, 0, 2)
					} else {
						out.Currencies = []Currencies{}
					}
				} else {
					out.Currencies = (out.Currencies)[:0]
				}
				for !in.IsDelim(']') {
					var v17 Currencies
					(v17).UnmarshalEasyJSON(in)
					out.Currencies = append(out.Currencies, v17)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComChris124567FifaApi9(out *jwriter.Writer, in TradeStatusResponse) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Credits != 0 {
		const prefix string = ",\"credits\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.Credits))
	}
	if len(in.AuctionInfo) != 0 {
		const prefix string = ",\"auctionInfo\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v18, v19 := range in.AuctionInfo {
				if v18 > 0 {
					out.RawByte(',')
				}
				(v19).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if true {
		const prefix string = ",\"bidTokens\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.BidTokens).MarshalEasyJSON(out)
	}
	if len(in.Currencies) != 0 {
		const prefix string = ",\"currencies\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v20, v21 := range in.Currencies {
				if v20 > 0 {
					out.RawByte(',')
				}
				(v21).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TradeStatusResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComChris124567FifaApi9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TradeStatusResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComChris124567FifaApi9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TradeStatusResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComChris124567FifaApi9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TradeStatusResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComChris124567FifaApi9(l, v)
}
func easyjson6601e8cdDecodeGithubComChris124567FifaApi10(in *jlexer.Lexer, out *TradeStatusLiteResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "auctionInfo":
			if in.IsNull() {
				in.Skip()
				out.AuctionInfo = nil
			} else {
				in.Delim('[')
				if out.AuctionInfo == nil {
					if !in.IsDelim(']') {
						out.AuctionInfo = make([]AuctionInfo, 0, 0)
					} else {
						out.AuctionInfo = []AuctionInfo{}
					}
				} else {
					out.AuctionInfo = (out.AuctionInfo)[:0]
				}
				for !in.IsDelim(']') {
					var v22 AuctionInfo
					(v22).UnmarshalEasyJSON(in)
					out.AuctionInfo = append(out.AuctionInfo, v22)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComChris124567FifaApi10(out *jwriter.Writer, in TradeStatusLiteResponse) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.AuctionInfo) != 0 {
		const prefix string = ",\"auctionInfo\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('[')
			for v23, v24 := range in.AuctionInfo {
				if v23 > 0 {
					out.RawByte(',')
				}
				(v24).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TradeStatusLiteResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComChris124567FifaApi10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TradeStatusLiteResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComChris124567FifaApi10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TradeStatusLiteResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComChris124567FifaApi10(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TradeStatusLiteResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComChris124567FifaApi10(l, v)
}
func easyjson6601e8cdDecodeGithubComChris124567FifaApi11(in *jlexer.Lexer, out *TradeIDList) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64())
		case "idStr":
			out.IDStr = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComChris124567FifaApi11(out *jwriter.Writer, in TradeIDList) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != 0 {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.Int64(int64(in.ID))
	}
	if in.IDStr != "" {
		const prefix string = ",\"idStr\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.IDStr))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TradeIDList) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComChris124567FifaApi11(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TradeIDList) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComChris124567FifaApi11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TradeIDList) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComChris124567FifaApi11(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TradeIDList) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComChris124567FifaApi11(l, v)
}
func easyjson6601e8cdDecodeGithubComChris124567FifaApi12(in *jlexer.Lexer, out *Trackurls) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComChris124567FifaApi12(out *jwriter.Writer, in Trackurls) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Trackurls) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComChris124567FifaApi12(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Trackurls) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComChris124567FifaApi12(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Trackurls) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComChris124567FifaApi12(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Trackurls) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComChris124567FifaApi12(l, v)
}
func easyjson6601e8cdDecodeGithubComChris124567FifaApi13(in *jlexer.Lexer, out *TokenResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "access_token":
			out.AccessToken = string(in.String())
		case "token_type":
			out.TokenType = string(in.String())
		case "expires_in":
			out.ExpiresIn = int(in.Int())
		case "refresh_token":
			out.RefreshToken = string(in.String())
		case "id_token":
			if m, ok := out.IDToken.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.IDToken.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.IDToken = in.Interface()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComChris124567FifaApi13(out *jwriter.Writer, in TokenResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"access_token\":"
		out.RawString(prefix[1:])
		out.String(string(in.AccessToken))
	}
	{
		const prefix string = ",\"token_type\":"
		out.RawString(prefix)
		out.String(string(in.TokenType))
	}
	{
		const prefix string = ",\"expires_in\":"
		out.RawString(prefix)
		out.Int(int(in.ExpiresIn))
	}
	{
		const prefix string = ",\"refresh_token\":"
		out.RawString(prefix)
		out.String(string(in.RefreshToken))
	}
	{
		const prefix string = ",\"id_token\":"
		out.RawString(prefix)
		if m, ok := in.IDToken.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.IDToken.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.IDToken))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TokenResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComChris124567FifaApi13(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TokenResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComChris124567FifaApi13(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TokenResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComChris124567FifaApi13(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TokenResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComChris124567FifaApi13(l, v)
}
func easyjson6601e8cdDecodeGithubComChris124567FifaApi14(in *jlexer.Lexer, out *Tiers) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "tier":
			out.Tier = int(in.Int())
		case "slots":
			if in.IsNull() {
				in.Skip()
				out.Slots = nil
			} else {
				in.Delim('[')
				if out.Slots == nil {
					if !in.IsDelim(']') {
						out.Slots = make([]Slots, 0, 0)
					} else {
						out.Slots = []Slots{}
					}
				} else {
					out.Slots = (out.Slots)[:0]
				}
				for !in.IsDelim(']') {
					var v25 Slots
					(v25).UnmarshalEasyJSON(in)
					out.Slots = append(out.Slots, v25)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComChris124567FifaApi14(out *jwriter.Writer, in Tiers) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Tier != 0 {
		const prefix string = ",\"tier\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.Tier))
	}
	if len(in.Slots) != 0 {
		const prefix string = ",\"slots\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v26, v27 := range in.Slots {
				if v26 > 0 {
					out.RawByte(',')
				}
				(v27).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Tiers) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComChris124567FifaApi14(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Tiers) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComChris124567FifaApi14(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Tiers) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComChris124567FifaApi14(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Tiers) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComChris124567FifaApi14(l, v)
}
func easyjson6601e8cdDecodeGithubComChris124567FifaApi15(in *jlexer.Lexer, out *Tactics) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "squadId":
			out.SquadID = int(in.Int())
		case "tactic":
			out.Tactic = string(in.String())
		case "lastUpdateTime":
			out.LastUpdateTime = int(in.Int())
		case "formation":
			out.Formation = string(in.String())
		case "positions":
			if in.IsNull() {
				in.Skip()
				out.Positions = nil
			} else {
				in.Delim('[')
				if out.Positions == nil {
					if !in.IsDelim(']') {
						out.Positions = make([]Positions, 0, 4)
					} else {
						out.Positions = []Positions{}
					}
				} else {
					out.Positions = (out.Positions)[:0]
				}
				for !in.IsDelim(']') {
					var v28 Positions
					(v28).UnmarshalEasyJSON(in)
					out.Positions = append(out.Positions, v28)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "instructions":
			if in.IsNull() {
				in.Skip()
				out.Instructions = nil
			} else {
				in.Delim('[')
				if out.Instructions == nil {
					if !in.IsDelim(']') {
						out.Instructions = make([]Instructions, 0, 4)
					} else {
						out.Instructions = []Instructions{}
					}
				} else {
					out.Instructions = (out.Instructions)[:0]
				}
				for !in.IsDelim(']') {
					var v29 Instructions
					(v29).UnmarshalEasyJSON(in)
					out.Instructions = append(out.Instructions, v29)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "styles":
			if in.IsNull() {
				in.Skip()
				out.Styles = nil
			} else {
				in.Delim('[')
				if out.Styles == nil {
					if !in.IsDelim(']') {
						out.Styles = make([]Styles, 0, 4)
					} else {
						out.Styles = []Styles{}
					}
				} else {
					out.Styles = (out.Styles)[:0]
				}
				for !in.IsDelim(']') {
					var v30 Styles
					(v30).UnmarshalEasyJSON(in)
					out.Styles = append(out.Styles, v30)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComChris124567FifaApi15(out *jwriter.Writer, in Tactics) {
	out.RawByte('{')
	first := true
	_ = first
	if in.SquadID != 0 {
		const prefix string = ",\"squadId\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.SquadID))
	}
	if in.Tactic != "" {
		const prefix string = ",\"tactic\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Tactic))
	}
	if in.LastUpdateTime != 0 {
		const prefix string = ",\"lastUpdateTime\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.LastUpdateTime))
	}
	if in.Formation != "" {
		const prefix string = ",\"formation\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Formation))
	}
	if len(in.Positions) != 0 {
		const prefix string = ",\"positions\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v31, v32 := range in.Positions {
				if v31 > 0 {
					out.RawByte(',')
				}
				(v32).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if len(in.Instructions) != 0 {
		const prefix string = ",\"instructions\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v33, v34 := range in.Instructions {
				if v33 > 0 {
					out.RawByte(',')
				}
				(v34).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if len(in.Styles) != 0 {
		const prefix string = ",\"styles\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v35, v36 := range in.Styles {
				if v35 > 0 {
					out.RawByte(',')
				}
				(v36).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Tactics) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComChris124567FifaApi15(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Tactics) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComChris124567FifaApi15(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Tactics) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComChris124567FifaApi15(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Tactics) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComChris124567FifaApi15(l, v)
}
func easyjson6601e8cdDecodeGithubComChris124567FifaApi16(in *jlexer.Lexer, out *Styles) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "index":
			out.Index = int(in.Int())
		case "value":
			out.Value = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComChris124567FifaApi16(out *jwriter.Writer, in Styles) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Index != 0 {
		const prefix string = ",\"index\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.Index))
	}
	if in.Value != 0 {
		const prefix string = ",\"value\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Value))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Styles) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComChris124567FifaApi16(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Styles) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComChris124567FifaApi16(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Styles) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComChris124567FifaApi16(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Styles) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComChris124567FifaApi16(l, v)
}
func easyjson6601e8cdDecodeGithubComChris124567FifaApi17(in *jlexer.Lexer, out *StadiumResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "stadiumId":
			out.StadiumID = int(in.Int())
		case "name":
			out.Name = string(in.String())
		case "lastUsedTierLevel":
			out.LastUsedTierLevel = int(in.Int())
		case "tiers":
			if in.IsNull() {
				in.Skip()
				out.Tiers = nil
			} else {
				in.Delim('[')
				if out.Tiers == nil {
					if !in.IsDelim(']') {
						out.Tiers = make([]Tiers, 0, 2)
					} else {
						out.Tiers = []Tiers{}
					}
				} else {
					out.Tiers = (out.Tiers)[:0]
				}
				for !in.IsDelim(']') {
					var v37 Tiers
					(v37).UnmarshalEasyJSON(in)
					out.Tiers = append(out.Tiers, v37)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComChris124567FifaApi17(out *jwriter.Writer, in StadiumResponse) {
	out.RawByte('{')
	first := true
	_ = first
	if in.StadiumID != 0 {
		const prefix string = ",\"stadiumId\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.StadiumID))
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	if in.LastUsedTierLevel != 0 {
		const prefix string = ",\"lastUsedTierLevel\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.LastUsedTierLevel))
	}
	if len(in.Tiers) != 0 {
		const prefix string = ",\"tiers\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v38, v39 := range in.Tiers {
				if v38 > 0 {
					out.RawByte(',')
				}
				(v39).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v StadiumResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComChris124567FifaApi17(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v StadiumResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComChris124567FifaApi17(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *StadiumResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComChris124567FifaApi17(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *StadiumResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComChris124567FifaApi17(l, v)
}
func easyjson6601e8cdDecodeGithubComChris124567FifaApi18(in *jlexer.Lexer, out *SquadListResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "squad":
			if in.IsNull() {
				in.Skip()
				out.Squad = nil
			} else {
				in.Delim('[')
				if out.Squad == nil {
					if !in.IsDelim(']') {
						out.Squad = make([]Squad, 0, 0)
					} else {
						out.Squad = []Squad{}
					}
				} else {
					out.Squad = (out.Squad)[:0]
				}
				for !in.IsDelim(']') {
					var v40 Squad
					(v40).UnmarshalEasyJSON(in)
					out.Squad = append(out.Squad, v40)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "activeSquadId":
			out.ActiveSquadID = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComChris124567FifaApi18(out *jwriter.Writer, in SquadListResponse) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Squad) != 0 {
		const prefix string = ",\"squad\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('[')
			for v41, v42 := range in.Squad {
				if v41 > 0 {
					out.RawByte(',')
				}
				(v42).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if in.ActiveSquadID != 0 {
		const prefix string = ",\"activeSquadId\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.ActiveSquadID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SquadListResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComChris124567FifaApi18(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SquadListResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComChris124567FifaApi18(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SquadListResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComChris124567FifaApi18(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SquadListResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComChris124567FifaApi18(l, v)
}
func easyjson6601e8cdDecodeGithubComChris124567FifaApi19(in *jlexer.Lexer, out *Squad) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		case "valid":
			out.Valid = bool(in.Bool())
		case "personaId":
			if m, ok := out.PersonaID.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.PersonaID.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.PersonaID = in.Interface()
			}
		case "formation":
			out.Formation = string(in.String())
		case "rating":
			out.Rating = int(in.Int())
		case "chemistry":
			out.Chemistry = int(in.Int())
		case "manager":
			if in.IsNull() {
				in.Skip()
				out.Manager = nil
			} else {
				in.Delim('[')
				if out.Manager == nil {
					if !in.IsDelim(']') {
						out.Manager = make([]interface{}, 0, 4)
					} else {
						out.Manager = []interface{}{}
					}
				} else {
					out.Manager = (out.Manager)[:0]
				}
				for !in.IsDelim(']') {
					var v43 interface{}
					if m, ok := v43.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v43.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v43 = in.Interface()
					}
					out.Manager = append(out.Manager, v43)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "players":
			if in.IsNull() {
				in.Skip()
				out.Players = nil
			} else {
				in.Delim('[')
				if out.Players == nil {
					if !in.IsDelim(']') {
						out.Players = make([]interface{}, 0, 4)
					} else {
						out.Players = []interface{}{}
					}
				} else {
					out.Players = (out.Players)[:0]
				}
				for !in.IsDelim(']') {
					var v44 interface{}
					if m, ok := v44.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v44.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v44 = in.Interface()
					}
					out.Players = append(out.Players, v44)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "dreamSquad":
			out.DreamSquad = bool(in.Bool())
		case "changed":
			if m, ok := out.Changed.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Changed.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Changed = in.Interface()
			}
		case "squadName":
			out.SquadName = string(in.String())
		case "starRating":
			out.StarRating = int(in.Int())
		case "captain":
			if m, ok := out.Captain.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Captain.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Captain = in.Interface()
			}
		case "kicktakers":
			if in.IsNull() {
				in.Skip()
				out.Kicktakers = nil
			} else {
				in.Delim('[')
				if out.Kicktakers == nil {
					if !in.IsDelim(']') {
						out.Kicktakers = make([]interface{}, 0, 4)
					} else {
						out.Kicktakers = []interface{}{}
					}
				} else {
					out.Kicktakers = (out.Kicktakers)[:0]
				}
				for !in.IsDelim(']') {
					var v45 interface{}
					if m, ok := v45.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v45.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v45 = in.Interface()
					}
					out.Kicktakers = append(out.Kicktakers, v45)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "actives":
			if in.IsNull() {
				in.Skip()
				out.Actives = nil
			} else {
				in.Delim('[')
				if out.Actives == nil {
					if !in.IsDelim(']') {
						out.Actives = make([]interface{}, 0, 4)
					} else {
						out.Actives = []interface{}{}
					}
				} else {
					out.Actives = (out.Actives)[:0]
				}
				for !in.IsDelim(']') {
					var v46 interface{}
					if m, ok := v46.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v46.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v46 = in.Interface()
					}
					out.Actives = append(out.Actives, v46)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "newSquad":
			if m, ok := out.NewSquad.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.NewSquad.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.NewSquad = in.Interface()
			}
		case "squadType":
			out.SquadType = string(in.String())
		case "custom":
			if m, ok := out.Custom.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Custom.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Custom = in.Interface()
			}
		case "tactics":
			if in.IsNull() {
				in.Skip()
				out.Tactics = nil
			} else {
				in.Delim('[')
				if out.Tactics == nil {
					if !in.IsDelim(']') {
						out.Tactics = make([]Tactics, 0, 0)
					} else {
						out.Tactics = []Tactics{}
					}
				} else {
					out.Tactics = (out.Tactics)[:0]
				}
				for !in.IsDelim(']') {
					var v47 Tactics
					(v47).UnmarshalEasyJSON(in)
					out.Tactics = append(out.Tactics, v47)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComChris124567FifaApi19(out *jwriter.Writer, in Squad) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != 0 {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	if in.Valid {
		const prefix string = ",\"valid\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Valid))
	}
	if in.PersonaID != nil {
		const prefix string = ",\"personaId\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if m, ok := in.PersonaID.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.PersonaID.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.PersonaID))
		}
	}
	if in.Formation != "" {
		const prefix string = ",\"formation\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Formation))
	}
	if in.Rating != 0 {
		const prefix string = ",\"rating\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Rating))
	}
	if in.Chemistry != 0 {
		const prefix string = ",\"chemistry\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Chemistry))
	}
	if len(in.Manager) != 0 {
		const prefix string = ",\"manager\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v48, v49 := range in.Manager {
				if v48 > 0 {
					out.RawByte(',')
				}
				if m, ok := v49.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v49.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v49))
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.Players) != 0 {
		const prefix string = ",\"players\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v50, v51 := range in.Players {
				if v50 > 0 {
					out.RawByte(',')
				}
				if m, ok := v51.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v51.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v51))
				}
			}
			out.RawByte(']')
		}
	}
	if in.DreamSquad {
		const prefix string = ",\"dreamSquad\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.DreamSquad))
	}
	if in.Changed != nil {
		const prefix string = ",\"changed\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if m, ok := in.Changed.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Changed.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Changed))
		}
	}
	if in.SquadName != "" {
		const prefix string = ",\"squadName\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.SquadName))
	}
	if in.StarRating != 0 {
		const prefix string = ",\"starRating\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.StarRating))
	}
	if in.Captain != nil {
		const prefix string = ",\"captain\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if m, ok := in.Captain.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Captain.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Captain))
		}
	}
	if len(in.Kicktakers) != 0 {
		const prefix string = ",\"kicktakers\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v52, v53 := range in.Kicktakers {
				if v52 > 0 {
					out.RawByte(',')
				}
				if m, ok := v53.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v53.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v53))
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.Actives) != 0 {
		const prefix string = ",\"actives\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v54, v55 := range in.Actives {
				if v54 > 0 {
					out.RawByte(',')
				}
				if m, ok := v55.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v55.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v55))
				}
			}
			out.RawByte(']')
		}
	}
	if in.NewSquad != nil {
		const prefix string = ",\"newSquad\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if m, ok := in.NewSquad.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.NewSquad.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.NewSquad))
		}
	}
	if in.SquadType != "" {
		const prefix string = ",\"squadType\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.SquadType))
	}
	if in.Custom != nil {
		const prefix string = ",\"custom\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if m, ok := in.Custom.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Custom.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Custom))
		}
	}
	if len(in.Tactics) != 0 {
		const prefix string = ",\"tactics\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v56, v57 := range in.Tactics {
				if v56 > 0 {
					out.RawByte(',')
				}
				(v57).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Squad) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComChris124567FifaApi19(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Squad) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComChris124567FifaApi19(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Squad) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComChris124567FifaApi19(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Squad) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComChris124567FifaApi19(l, v)
}
func easyjson6601e8cdDecodeGithubComChris124567FifaApi20(in *jlexer.Lexer, out *Slots) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "slotId":
			out.SlotID = int(in.Int())
		case "locked":
			out.Locked = bool(in.Bool())
		case "stadiumArea":
			out.StadiumArea = int(in.Int())
		case "slotName":
			out.SlotName = string(in.String())
		case "home":
			out.Home = bool(in.Bool())
		case "vanityTypes":
			if in.IsNull() {
				in.Skip()
				out.VanityTypes = nil
			} else {
				in.Delim('[')
				if out.VanityTypes == nil {
					if !in.IsDelim(']') {
						out.VanityTypes = make([]int, 0, 8)
					} else {
						out.VanityTypes = []int{}
					}
				} else {
					out.VanityTypes = (out.VanityTypes)[:0]
				}
				for !in.IsDelim(']') {
					var v58 int
					v58 = int(in.Int())
					out.VanityTypes = append(out.VanityTypes, v58)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "attributes":
			if in.IsNull() {
				in.Skip()
				out.Attributes = nil
			} else {
				in.Delim('[')
				if out.Attributes == nil {
					if !in.IsDelim(']') {
						out.Attributes = make([]int, 0, 8)
					} else {
						out.Attributes = []int{}
					}
				} else {
					out.Attributes = (out.Attributes)[:0]
				}
				for !in.IsDelim(']') {
					var v59 int
					v59 = int(in.Int())
					out.Attributes = append(out.Attributes, v59)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "clientSlotId":
			out.ClientSlotID = int(in.Int())
		case "defaultUnlocked":
			out.DefaultUnlocked = bool(in.Bool())
		case "activeSlot":
			out.ActiveSlot = bool(in.Bool())
		case "emptiable":
			out.Emptiable = bool(in.Bool())
		case "sortOrder":
			out.SortOrder = int(in.Int())
		case "itemData":
			(out.ItemData).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComChris124567FifaApi20(out *jwriter.Writer, in Slots) {
	out.RawByte('{')
	first := true
	_ = first
	if in.SlotID != 0 {
		const prefix string = ",\"slotId\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.SlotID))
	}
	if in.Locked {
		const prefix string = ",\"locked\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Locked))
	}
	if in.StadiumArea != 0 {
		const prefix string = ",\"stadiumArea\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.StadiumArea))
	}
	if in.SlotName != "" {
		const prefix string = ",\"slotName\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.SlotName))
	}
	if in.Home {
		const prefix string = ",\"home\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Home))
	}
	if len(in.VanityTypes) != 0 {
		const prefix string = ",\"vanityTypes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v60, v61 := range in.VanityTypes {
				if v60 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v61))
			}
			out.RawByte(']')
		}
	}
	if len(in.Attributes) != 0 {
		const prefix string = ",\"attributes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v62, v63 := range in.Attributes {
				if v62 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v63))
			}
			out.RawByte(']')
		}
	}
	if in.ClientSlotID != 0 {
		const prefix string = ",\"clientSlotId\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.ClientSlotID))
	}
	if in.DefaultUnlocked {
		const prefix string = ",\"defaultUnlocked\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.DefaultUnlocked))
	}
	if in.ActiveSlot {
		const prefix string = ",\"activeSlot\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.ActiveSlot))
	}
	if in.Emptiable {
		const prefix string = ",\"emptiable\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Emptiable))
	}
	if in.SortOrder != 0 {
		const prefix string = ",\"sortOrder\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.SortOrder))
	}
	if true {
		const prefix string = ",\"itemData\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.ItemData).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Slots) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComChris124567FifaApi20(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Slots) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComChris124567FifaApi20(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Slots) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComChris124567FifaApi20(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Slots) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComChris124567FifaApi20(l, v)
}
func easyjson6601e8cdDecodeGithubComChris124567FifaApi21(in *jlexer.Lexer, out *SettingsResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "configs":
			if in.IsNull() {
				in.Skip()
				out.Configs = nil
			} else {
				in.Delim('[')
				if out.Configs == nil {
					if !in.IsDelim(']') {
						out.Configs = make([]struct {
							Value int    `json:"value,omitempty"`
							Type  string `json:"type,omitempty"`
						}, 0, 2)
					} else {
						out.Configs = []struct {
							Value int    `json:"value,omitempty"`
							Type  string `json:"type,omitempty"`
						}{}
					}
				} else {
					out.Configs = (out.Configs)[:0]
				}
				for !in.IsDelim(']') {
					var v64 struct {
						Value int    `json:"value,omitempty"`
						Type  string `json:"type,omitempty"`
					}
					easyjson6601e8cdDecode1(in, &v64)
					out.Configs = append(out.Configs, v64)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComChris124567FifaApi21(out *jwriter.Writer, in SettingsResponse) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Configs) != 0 {
		const prefix string = ",\"configs\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('[')
			for v65, v66 := range in.Configs {
				if v65 > 0 {
					out.RawByte(',')
				}
				easyjson6601e8cdEncode1(out, v66)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SettingsResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComChris124567FifaApi21(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SettingsResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComChris124567FifaApi21(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SettingsResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComChris124567FifaApi21(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SettingsResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComChris124567FifaApi21(l, v)
}
func easyjson6601e8cdDecode1(in *jlexer.Lexer, out *struct {
	Value int    `json:"value,omitempty"`
	Type  string `json:"type,omitempty"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "value":
			out.Value = int(in.Int())
		case "type":
			out.Type = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncode1(out *jwriter.Writer, in struct {
	Value int    `json:"value,omitempty"`
	Type  string `json:"type,omitempty"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Value != 0 {
		const prefix string = ",\"value\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.Value))
	}
	if in.Type != "" {
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Type))
	}
	out.RawByte('}')
}
func easyjson6601e8cdDecodeGithubComChris124567FifaApi22(in *jlexer.Lexer, out *Settings) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "configs":
			if in.IsNull() {
				in.Skip()
				out.Configs = nil
			} else {
				in.Delim('[')
				if out.Configs == nil {
					if !in.IsDelim(']') {
						out.Configs = make([]Configs, 0, 2)
					} else {
						out.Configs = []Configs{}
					}
				} else {
					out.Configs = (out.Configs)[:0]
				}
				for !in.IsDelim(']') {
					var v67 Configs
					(v67).UnmarshalEasyJSON(in)
					out.Configs = append(out.Configs, v67)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComChris124567FifaApi22(out *jwriter.Writer, in Settings) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Configs) != 0 {
		const prefix string = ",\"configs\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('[')
			for v68, v69 := range in.Configs {
				if v68 > 0 {
					out.RawByte(',')
				}
				(v69).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Settings) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComChris124567FifaApi22(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Settings) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComChris124567FifaApi22(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Settings) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComChris124567FifaApi22(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Settings) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComChris124567FifaApi22(l, v)
}
func easyjson6601e8cdDecodeGithubComChris124567FifaApi23(in *jlexer.Lexer, out *ScmpGroupProgressList) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "groupId":
			out.GroupID = int(in.Int())
		case "state":
			out.State = int(in.Int())
		case "objectiveProgressList":
			if in.IsNull() {
				in.Skip()
				out.ObjectiveProgressList = nil
			} else {
				in.Delim('[')
				if out.ObjectiveProgressList == nil {
					if !in.IsDelim(']') {
						out.ObjectiveProgressList = make([]ObjectiveProgressList, 0, 2)
					} else {
						out.ObjectiveProgressList = []ObjectiveProgressList{}
					}
				} else {
					out.ObjectiveProgressList = (out.ObjectiveProgressList)[:0]
				}
				for !in.IsDelim(']') {
					var v70 ObjectiveProgressList
					(v70).UnmarshalEasyJSON(in)
					out.ObjectiveProgressList = append(out.ObjectiveProgressList, v70)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "groupType":
			out.GroupType = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComChris124567FifaApi23(out *jwriter.Writer, in ScmpGroupProgressList) {
	out.RawByte('{')
	first := true
	_ = first
	if in.GroupID != 0 {
		const prefix string = ",\"groupId\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.GroupID))
	}
	if in.State != 0 {
		const prefix string = ",\"state\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.State))
	}
	if len(in.ObjectiveProgressList) != 0 {
		const prefix string = ",\"objectiveProgressList\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v71, v72 := range in.ObjectiveProgressList {
				if v71 > 0 {
					out.RawByte(',')
				}
				(v72).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if in.GroupType != 0 {
		const prefix string = ",\"groupType\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.GroupType))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ScmpGroupProgressList) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComChris124567FifaApi23(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ScmpGroupProgressList) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComChris124567FifaApi23(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ScmpGroupProgressList) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComChris124567FifaApi23(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ScmpGroupProgressList) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComChris124567FifaApi23(l, v)
}
func easyjson6601e8cdDecodeGithubComChris124567FifaApi24(in *jlexer.Lexer, out *ScmpCategoryProgressList) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "categoryId":
			out.CategoryID = int(in.Int())
		case "scmpGroupProgressList":
			if in.IsNull() {
				in.Skip()
				out.ScmpGroupProgressList = nil
			} else {
				in.Delim('[')
				if out.ScmpGroupProgressList == nil {
					if !in.IsDelim(']') {
						out.ScmpGroupProgressList = make([]ScmpGroupProgressList, 0, 1)
					} else {
						out.ScmpGroupProgressList = []ScmpGroupProgressList{}
					}
				} else {
					out.ScmpGroupProgressList = (out.ScmpGroupProgressList)[:0]
				}
				for !in.IsDelim(']') {
					var v73 ScmpGroupProgressList
					(v73).UnmarshalEasyJSON(in)
					out.ScmpGroupProgressList = append(out.ScmpGroupProgressList, v73)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComChris124567FifaApi24(out *jwriter.Writer, in ScmpCategoryProgressList) {
	out.RawByte('{')
	first := true
	_ = first
	if in.CategoryID != 0 {
		const prefix string = ",\"categoryId\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.CategoryID))
	}
	if len(in.ScmpGroupProgressList) != 0 {
		const prefix string = ",\"scmpGroupProgressList\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v74, v75 := range in.ScmpGroupProgressList {
				if v74 > 0 {
					out.RawByte(',')
				}
				(v75).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ScmpCategoryProgressList) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComChris124567FifaApi24(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ScmpCategoryProgressList) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComChris124567FifaApi24(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ScmpCategoryProgressList) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComChris124567FifaApi24(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ScmpCategoryProgressList) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComChris124567FifaApi24(l, v)
}
func easyjson6601e8cdDecodeGithubComChris124567FifaApi25(in *jlexer.Lexer, out *Renders) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "value":
			out.Value = string(in.String())
		case "attributes":
			(out.Attributes).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComChris124567FifaApi25(out *jwriter.Writer, in Renders) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Type != "" {
		const prefix string = ",\"type\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	if in.Value != "" {
		const prefix string = ",\"value\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Value))
	}
	if true {
		const prefix string = ",\"attributes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Attributes).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Renders) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComChris124567FifaApi25(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Renders) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComChris124567FifaApi25(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Renders) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComChris124567FifaApi25(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Renders) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComChris124567FifaApi25(l, v)
}
func easyjson6601e8cdDecodeGithubComChris124567FifaApi26(in *jlexer.Lexer, out *RelistResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "tradeIdList":
			if in.IsNull() {
				in.Skip()
				out.TradeIDList = nil
			} else {
				in.Delim('[')
				if out.TradeIDList == nil {
					if !in.IsDelim(']') {
						out.TradeIDList = make([]TradeIDList, 0, 2)
					} else {
						out.TradeIDList = []TradeIDList{}
					}
				} else {
					out.TradeIDList = (out.TradeIDList)[:0]
				}
				for !in.IsDelim(']') {
					var v76 TradeIDList
					(v76).UnmarshalEasyJSON(in)
					out.TradeIDList = append(out.TradeIDList, v76)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "dynamicObjectivesUpdates":
			(out.DynamicObjectivesUpdates).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComChris124567FifaApi26(out *jwriter.Writer, in RelistResponse) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.TradeIDList) != 0 {
		const prefix string = ",\"tradeIdList\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('[')
			for v77, v78 := range in.TradeIDList {
				if v77 > 0 {
					out.RawByte(',')
				}
				(v78).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if true {
		const prefix string = ",\"dynamicObjectivesUpdates\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.DynamicObjectivesUpdates).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RelistResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComChris124567FifaApi26(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RelistResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComChris124567FifaApi26(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RelistResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComChris124567FifaApi26(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RelistResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComChris124567FifaApi26(l, v)
}
func easyjson6601e8cdDecodeGithubComChris124567FifaApi27(in *jlexer.Lexer, out *Reliability) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "reliability":
			out.Reliability = int(in.Int())
		case "startedMatches":
			out.StartedMatches = int(in.Int())
		case "finishedMatches":
			out.FinishedMatches = int(in.Int())
		case "matchUnfinishedTime":
			out.MatchUnfinishedTime = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComChris124567FifaApi27(out *jwriter.Writer, in Reliability) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Reliability != 0 {
		const prefix string = ",\"reliability\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.Reliability))
	}
	if in.StartedMatches != 0 {
		const prefix string = ",\"startedMatches\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.StartedMatches))
	}
	if in.FinishedMatches != 0 {
		const prefix string = ",\"finishedMatches\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.FinishedMatches))
	}
	if in.MatchUnfinishedTime != 0 {
		const prefix string = ",\"matchUnfinishedTime\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.MatchUnfinishedTime))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Reliability) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComChris124567FifaApi27(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Reliability) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComChris124567FifaApi27(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Reliability) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComChris124567FifaApi27(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Reliability) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComChris124567FifaApi27(l, v)
}
func easyjson6601e8cdDecodeGithubComChris124567FifaApi28(in *jlexer.Lexer, out *PurchasedItems) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "itemData":
			if in.IsNull() {
				in.Skip()
				out.ItemData = nil
			} else {
				in.Delim('[')
				if out.ItemData == nil {
					if !in.IsDelim(']') {
						out.ItemData = make([]ItemData, 0, 0)
					} else {
						out.ItemData = []ItemData{}
					}
				} else {
					out.ItemData = (out.ItemData)[:0]
				}
				for !in.IsDelim(']') {
					var v79 ItemData
					(v79).UnmarshalEasyJSON(in)
					out.ItemData = append(out.ItemData, v79)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComChris124567FifaApi28(out *jwriter.Writer, in PurchasedItems) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.ItemData) != 0 {
		const prefix string = ",\"itemData\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('[')
			for v80, v81 := range in.ItemData {
				if v80 > 0 {
					out.RawByte(',')
				}
				(v81).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PurchasedItems) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComChris124567FifaApi28(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PurchasedItems) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComChris124567FifaApi28(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PurchasedItems) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComChris124567FifaApi28(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PurchasedItems) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComChris124567FifaApi28(l, v)
}
func easyjson6601e8cdDecodeGithubComChris124567FifaApi29(in *jlexer.Lexer, out *PriceLimit) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "source":
			out.Source = string(in.String())
		case "defId":
			out.DefID = int(in.Int())
		case "itemId":
			out.ItemID = int64(in.Int64())
		case "minPrice":
			out.MinPrice = int(in.Int())
		case "maxPrice":
			out.MaxPrice = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComChris124567FifaApi29(out *jwriter.Writer, in PriceLimit) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Source != "" {
		const prefix string = ",\"source\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Source))
	}
	if in.DefID != 0 {
		const prefix string = ",\"defId\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.DefID))
	}
	if in.ItemID != 0 {
		const prefix string = ",\"itemId\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.ItemID))
	}
	if in.MinPrice != 0 {
		const prefix string = ",\"minPrice\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.MinPrice))
	}
	if in.MaxPrice != 0 {
		const prefix string = ",\"maxPrice\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.MaxPrice))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PriceLimit) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComChris124567FifaApi29(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PriceLimit) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComChris124567FifaApi29(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PriceLimit) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComChris124567FifaApi29(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PriceLimit) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComChris124567FifaApi29(l, v)
}
func easyjson6601e8cdDecodeGithubComChris124567FifaApi30(in *jlexer.Lexer, out *Positions) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "index":
			out.Index = int(in.Int())
		case "value":
			out.Value = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComChris124567FifaApi30(out *jwriter.Writer, in Positions) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Index != 0 {
		const prefix string = ",\"index\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.Index))
	}
	if in.Value != 0 {
		const prefix string = ",\"value\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Value))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Positions) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComChris124567FifaApi30(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Positions) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComChris124567FifaApi30(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Positions) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComChris124567FifaApi30(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Positions) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComChris124567FifaApi30(l, v)
}
func easyjson6601e8cdDecodeGithubComChris124567FifaApi31(in *jlexer.Lexer, out *PlayerHealthStats) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "current":
			out.Current = int(in.Int())
		case "previous":
			out.Previous = int(in.Int())
		case "total":
			out.Total = int(in.Int())
		case "limit":
			out.Limit = int(in.Int())
		case "nextRolloverTime":
			out.NextRolloverTime = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComChris124567FifaApi31(out *jwriter.Writer, in PlayerHealthStats) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != "" {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	if in.Current != 0 {
		const prefix string = ",\"current\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Current))
	}
	if in.Previous != 0 {
		const prefix string = ",\"previous\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Previous))
	}
	if in.Total != 0 {
		const prefix string = ",\"total\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Total))
	}
	if in.Limit != 0 {
		const prefix string = ",\"limit\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Limit))
	}
	if in.NextRolloverTime != 0 {
		const prefix string = ",\"nextRolloverTime\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.NextRolloverTime))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PlayerHealthStats) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComChris124567FifaApi31(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PlayerHealthStats) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComChris124567FifaApi31(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PlayerHealthStats) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComChris124567FifaApi31(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PlayerHealthStats) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComChris124567FifaApi31(l, v)
}
func easyjson6601e8cdDecodeGithubComChris124567FifaApi32(in *jlexer.Lexer, out *PlayStatsResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "userOptIn":
			out.UserOptIn = bool(in.Bool())
		case "playerHealthStats":
			if in.IsNull() {
				in.Skip()
				out.PlayerHealthStats = nil
			} else {
				in.Delim('[')
				if out.PlayerHealthStats == nil {
					if !in.IsDelim(']') {
						out.PlayerHealthStats = make([]PlayerHealthStats, 0, 1)
					} else {
						out.PlayerHealthStats = []PlayerHealthStats{}
					}
				} else {
					out.PlayerHealthStats = (out.PlayerHealthStats)[:0]
				}
				for !in.IsDelim(']') {
					var v82 PlayerHealthStats
					(v82).UnmarshalEasyJSON(in)
					out.PlayerHealthStats = append(out.PlayerHealthStats, v82)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "crtServerTime":
			out.CrtServerTime = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComChris124567FifaApi32(out *jwriter.Writer, in PlayStatsResponse) {
	out.RawByte('{')
	first := true
	_ = first
	if in.UserOptIn {
		const prefix string = ",\"userOptIn\":"
		first = false
		out.RawString(prefix[1:])
		out.Bool(bool(in.UserOptIn))
	}
	if len(in.PlayerHealthStats) != 0 {
		const prefix string = ",\"playerHealthStats\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v83, v84 := range in.PlayerHealthStats {
				if v83 > 0 {
					out.RawByte(',')
				}
				(v84).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if in.CrtServerTime != 0 {
		const prefix string = ",\"crtServerTime\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.CrtServerTime))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PlayStatsResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComChris124567FifaApi32(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PlayStatsResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComChris124567FifaApi32(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PlayStatsResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComChris124567FifaApi32(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PlayStatsResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComChris124567FifaApi32(l, v)
}
func easyjson6601e8cdDecodeGithubComChris124567FifaApi33(in *jlexer.Lexer, out *PinEventsResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "status":
			out.Status = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComChris124567FifaApi33(out *jwriter.Writer, in PinEventsResponse) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Status != "" {
		const prefix string = ",\"status\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Status))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PinEventsResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComChris124567FifaApi33(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PinEventsResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComChris124567FifaApi33(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PinEventsResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComChris124567FifaApi33(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PinEventsResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComChris124567FifaApi33(l, v)
}
func easyjson6601e8cdDecodeGithubComChris124567FifaApi34(in *jlexer.Lexer, out *PinEventResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "status":
			out.Status = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComChris124567FifaApi34(out *jwriter.Writer, in PinEventResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix[1:])
		out.String(string(in.Status))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PinEventResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComChris124567FifaApi34(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PinEventResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComChris124567FifaApi34(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PinEventResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComChris124567FifaApi34(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PinEventResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComChris124567FifaApi34(l, v)
}
func easyjson6601e8cdDecodeGithubComChris124567FifaApi35(in *jlexer.Lexer, out *OnboardingClientData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "entries":
			if in.IsNull() {
				in.Skip()
				out.Entries = nil
			} else {
				in.Delim('[')
				if out.Entries == nil {
					if !in.IsDelim(']') {
						out.Entries = make([]Entries, 0, 4)
					} else {
						out.Entries = []Entries{}
					}
				} else {
					out.Entries = (out.Entries)[:0]
				}
				for !in.IsDelim(']') {
					var v85 Entries
					(v85).UnmarshalEasyJSON(in)
					out.Entries = append(out.Entries, v85)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComChris124567FifaApi35(out *jwriter.Writer, in OnboardingClientData) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Entries) != 0 {
		const prefix string = ",\"entries\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('[')
			for v86, v87 := range in.Entries {
				if v86 > 0 {
					out.RawByte(',')
				}
				(v87).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v OnboardingClientData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComChris124567FifaApi35(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v OnboardingClientData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComChris124567FifaApi35(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *OnboardingClientData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComChris124567FifaApi35(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *OnboardingClientData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComChris124567FifaApi35(l, v)
}
func easyjson6601e8cdDecodeGithubComChris124567FifaApi36(in *jlexer.Lexer, out *ObjectiveProgressList) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "objectiveId":
			out.ObjectiveID = int(in.Int())
		case "state":
			out.State = int(in.Int())
		case "progressCount":
			out.ProgressCount = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComChris124567FifaApi36(out *jwriter.Writer, in ObjectiveProgressList) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ObjectiveID != 0 {
		const prefix string = ",\"objectiveId\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.ObjectiveID))
	}
	if in.State != 0 {
		const prefix string = ",\"state\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.State))
	}
	if in.ProgressCount != 0 {
		const prefix string = ",\"progressCount\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.ProgressCount))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ObjectiveProgressList) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComChris124567FifaApi36(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ObjectiveProgressList) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComChris124567FifaApi36(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ObjectiveProgressList) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComChris124567FifaApi36(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ObjectiveProgressList) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComChris124567FifaApi36(l, v)
}
func easyjson6601e8cdDecodeGithubComChris124567FifaApi37(in *jlexer.Lexer, out *MessageList) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "trackingTag":
			out.TrackingTag = string(in.String())
		case "screen":
			out.Screen = string(in.String())
		case "messageId":
			out.MessageID = int(in.Int())
		case "priority":
			out.Priority = int(in.Int())
		case "tmtLink":
			out.TmtLink = string(in.String())
		case "trackurls":
			(out.Trackurls).UnmarshalEasyJSON(in)
		case "subtype":
			out.Subtype = string(in.String())
		case "doNotDisplay":
			out.DoNotDisplay = string(in.String())
		case "renders":
			if in.IsNull() {
				in.Skip()
				out.Renders = nil
			} else {
				in.Delim('[')
				if out.Renders == nil {
					if !in.IsDelim(']') {
						out.Renders = make([]Renders, 0, 0)
					} else {
						out.Renders = []Renders{}
					}
				} else {
					out.Renders = (out.Renders)[:0]
				}
				for !in.IsDelim(']') {
					var v88 Renders
					(v88).UnmarshalEasyJSON(in)
					out.Renders = append(out.Renders, v88)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "promotions":
			if in.IsNull() {
				in.Skip()
				out.Promotions = nil
			} else {
				in.Delim('[')
				if out.Promotions == nil {
					if !in.IsDelim(']') {
						out.Promotions = make([]interface{}, 0, 4)
					} else {
						out.Promotions = []interface{}{}
					}
				} else {
					out.Promotions = (out.Promotions)[:0]
				}
				for !in.IsDelim(']') {
					var v89 interface{}
					if m, ok := v89.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v89.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v89 = in.Interface()
					}
					out.Promotions = append(out.Promotions, v89)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComChris124567FifaApi37(out *jwriter.Writer, in MessageList) {
	out.RawByte('{')
	first := true
	_ = first
	if in.TrackingTag != "" {
		const prefix string = ",\"trackingTag\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.TrackingTag))
	}
	if in.Screen != "" {
		const prefix string = ",\"screen\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Screen))
	}
	if in.MessageID != 0 {
		const prefix string = ",\"messageId\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.MessageID))
	}
	if in.Priority != 0 {
		const prefix string = ",\"priority\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Priority))
	}
	if in.TmtLink != "" {
		const prefix string = ",\"tmtLink\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.TmtLink))
	}
	if true {
		const prefix string = ",\"trackurls\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Trackurls).MarshalEasyJSON(out)
	}
	if in.Subtype != "" {
		const prefix string = ",\"subtype\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Subtype))
	}
	if in.DoNotDisplay != "" {
		const prefix string = ",\"doNotDisplay\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.DoNotDisplay))
	}
	if len(in.Renders) != 0 {
		const prefix string = ",\"renders\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v90, v91 := range in.Renders {
				if v90 > 0 {
					out.RawByte(',')
				}
				(v91).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if len(in.Promotions) != 0 {
		const prefix string = ",\"promotions\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v92, v93 := range in.Promotions {
				if v92 > 0 {
					out.RawByte(',')
				}
				if m, ok := v93.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v93.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v93))
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MessageList) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComChris124567FifaApi37(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MessageList) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComChris124567FifaApi37(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MessageList) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComChris124567FifaApi37(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MessageList) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComChris124567FifaApi37(l, v)
}
func easyjson6601e8cdDecodeGithubComChris124567FifaApi38(in *jlexer.Lexer, out *LtpEventsHubData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "needsLTPEventAutoclaim":
			out.NeedsLTPEventAutoclaim = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComChris124567FifaApi38(out *jwriter.Writer, in LtpEventsHubData) {
	out.RawByte('{')
	first := true
	_ = first
	if in.NeedsLTPEventAutoclaim {
		const prefix string = ",\"needsLTPEventAutoclaim\":"
		first = false
		out.RawString(prefix[1:])
		out.Bool(bool(in.NeedsLTPEventAutoclaim))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v LtpEventsHubData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComChris124567FifaApi38(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v LtpEventsHubData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComChris124567FifaApi38(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *LtpEventsHubData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComChris124567FifaApi38(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *LtpEventsHubData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComChris124567FifaApi38(l, v)
}
func easyjson6601e8cdDecodeGithubComChris124567FifaApi39(in *jlexer.Lexer, out *LoanPlayerClientData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "entries":
			if in.IsNull() {
				in.Skip()
				out.Entries = nil
			} else {
				in.Delim('[')
				if out.Entries == nil {
					if !in.IsDelim(']') {
						out.Entries = make([]Entries, 0, 4)
					} else {
						out.Entries = []Entries{}
					}
				} else {
					out.Entries = (out.Entries)[:0]
				}
				for !in.IsDelim(']') {
					var v94 Entries
					(v94).UnmarshalEasyJSON(in)
					out.Entries = append(out.Entries, v94)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComChris124567FifaApi39(out *jwriter.Writer, in LoanPlayerClientData) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Entries) != 0 {
		const prefix string = ",\"entries\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('[')
			for v95, v96 := range in.Entries {
				if v95 > 0 {
					out.RawByte(',')
				}
				(v96).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v LoanPlayerClientData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComChris124567FifaApi39(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v LoanPlayerClientData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComChris124567FifaApi39(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *LoanPlayerClientData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComChris124567FifaApi39(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *LoanPlayerClientData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComChris124567FifaApi39(l, v)
}
func easyjson6601e8cdDecodeGithubComChris124567FifaApi40(in *jlexer.Lexer, out *LiveMessageResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "messageList":
			if in.IsNull() {
				in.Skip()
				out.MessageList = nil
			} else {
				in.Delim('[')
				if out.MessageList == nil {
					if !in.IsDelim(']') {
						out.MessageList = make([]MessageList, 0, 0)
					} else {
						out.MessageList = []MessageList{}
					}
				} else {
					out.MessageList = (out.MessageList)[:0]
				}
				for !in.IsDelim(']') {
					var v97 MessageList
					(v97).UnmarshalEasyJSON(in)
					out.MessageList = append(out.MessageList, v97)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "messagesRead":
			out.MessagesRead = int(in.Int())
		case "messagesAvailable":
			out.MessagesAvailable = int(in.Int())
		case "promoUpdate":
			if in.IsNull() {
				in.Skip()
				out.PromoUpdate = nil
			} else {
				in.Delim('[')
				if out.PromoUpdate == nil {
					if !in.IsDelim(']') {
						out.PromoUpdate = make([]interface{}, 0, 4)
					} else {
						out.PromoUpdate = []interface{}{}
					}
				} else {
					out.PromoUpdate = (out.PromoUpdate)[:0]
				}
				for !in.IsDelim(']') {
					var v98 interface{}
					if m, ok := v98.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v98.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v98 = in.Interface()
					}
					out.PromoUpdate = append(out.PromoUpdate, v98)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComChris124567FifaApi40(out *jwriter.Writer, in LiveMessageResponse) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.MessageList) != 0 {
		const prefix string = ",\"messageList\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('[')
			for v99, v100 := range in.MessageList {
				if v99 > 0 {
					out.RawByte(',')
				}
				(v100).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if in.MessagesRead != 0 {
		const prefix string = ",\"messagesRead\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.MessagesRead))
	}
	if in.MessagesAvailable != 0 {
		const prefix string = ",\"messagesAvailable\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.MessagesAvailable))
	}
	if len(in.PromoUpdate) != 0 {
		const prefix string = ",\"promoUpdate\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v101, v102 := range in.PromoUpdate {
				if v101 > 0 {
					out.RawByte(',')
				}
				if m, ok := v102.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v102.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v102))
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v LiveMessageResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComChris124567FifaApi40(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v LiveMessageResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComChris124567FifaApi40(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *LiveMessageResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComChris124567FifaApi40(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *LiveMessageResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComChris124567FifaApi40(l, v)
}
func easyjson6601e8cdDecodeGithubComChris124567FifaApi41(in *jlexer.Lexer, out *LearningGroupProgressList) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "categoryId":
			out.CategoryID = int(in.Int())
		case "scmpGroupProgressList":
			if in.IsNull() {
				in.Skip()
				out.ScmpGroupProgressList = nil
			} else {
				in.Delim('[')
				if out.ScmpGroupProgressList == nil {
					if !in.IsDelim(']') {
						out.ScmpGroupProgressList = make([]ScmpGroupProgressList, 0, 1)
					} else {
						out.ScmpGroupProgressList = []ScmpGroupProgressList{}
					}
				} else {
					out.ScmpGroupProgressList = (out.ScmpGroupProgressList)[:0]
				}
				for !in.IsDelim(']') {
					var v103 ScmpGroupProgressList
					(v103).UnmarshalEasyJSON(in)
					out.ScmpGroupProgressList = append(out.ScmpGroupProgressList, v103)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComChris124567FifaApi41(out *jwriter.Writer, in LearningGroupProgressList) {
	out.RawByte('{')
	first := true
	_ = first
	if in.CategoryID != 0 {
		const prefix string = ",\"categoryId\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.CategoryID))
	}
	if len(in.ScmpGroupProgressList) != 0 {
		const prefix string = ",\"scmpGroupProgressList\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v104, v105 := range in.ScmpGroupProgressList {
				if v104 > 0 {
					out.RawByte(',')
				}
				(v105).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v LearningGroupProgressList) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComChris124567FifaApi41(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v LearningGroupProgressList) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComChris124567FifaApi41(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *LearningGroupProgressList) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComChris124567FifaApi41(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *LearningGroupProgressList) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComChris124567FifaApi41(l, v)
}
func easyjson6601e8cdDecodeGithubComChris124567FifaApi42(in *jlexer.Lexer, out *ItemResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "itemData":
			if in.IsNull() {
				in.Skip()
				out.ItemData = nil
			} else {
				in.Delim('[')
				if out.ItemData == nil {
					if !in.IsDelim(']') {
						out.ItemData = make([]ItemData, 0, 0)
					} else {
						out.ItemData = []ItemData{}
					}
				} else {
					out.ItemData = (out.ItemData)[:0]
				}
				for !in.IsDelim(']') {
					var v106 ItemData
					(v106).UnmarshalEasyJSON(in)
					out.ItemData = append(out.ItemData, v106)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComChris124567FifaApi42(out *jwriter.Writer, in ItemResponse) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.ItemData) != 0 {
		const prefix string = ",\"itemData\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('[')
			for v107, v108 := range in.ItemData {
				if v107 > 0 {
					out.RawByte(',')
				}
				(v108).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ItemResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComChris124567FifaApi42(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ItemResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComChris124567FifaApi42(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ItemResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComChris124567FifaApi42(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ItemResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComChris124567FifaApi42(l, v)
}
func easyjson6601e8cdDecodeGithubComChris124567FifaApi43(in *jlexer.Lexer, out *ItemRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "itemData":
			if in.IsNull() {
				in.Skip()
				out.ItemData = nil
			} else {
				in.Delim('[')
				if out.ItemData == nil {
					if !in.IsDelim(']') {
						out.ItemData = make([]ItemData, 0, 0)
					} else {
						out.ItemData = []ItemData{}
					}
				} else {
					out.ItemData = (out.ItemData)[:0]
				}
				for !in.IsDelim(']') {
					var v109 ItemData
					(v109).UnmarshalEasyJSON(in)
					out.ItemData = append(out.ItemData, v109)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComChris124567FifaApi43(out *jwriter.Writer, in ItemRequest) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.ItemData) != 0 {
		const prefix string = ",\"itemData\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('[')
			for v110, v111 := range in.ItemData {
				if v110 > 0 {
					out.RawByte(',')
				}
				(v111).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ItemRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComChris124567FifaApi43(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ItemRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComChris124567FifaApi43(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ItemRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComChris124567FifaApi43(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ItemRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComChris124567FifaApi43(l, v)
}
func easyjson6601e8cdDecodeGithubComChris124567FifaApi44(in *jlexer.Lexer, out *ItemData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64())
		case "timestamp":
			out.Timestamp = int(in.Int())
		case "formation":
			out.Formation = string(in.String())
		case "untradeable":
			out.Untradeable = bool(in.Bool())
		case "assetId":
			out.AssetID = int(in.Int())
		case "rating":
			out.Rating = int(in.Int())
		case "itemType":
			out.ItemType = string(in.String())
		case "resourceId":
			out.ResourceID = int(in.Int())
		case "owners":
			out.Owners = int(in.Int())
		case "discardValue":
			out.DiscardValue = int(in.Int())
		case "itemState":
			out.ItemState = string(in.String())
		case "cardsubtypeid":
			out.Cardsubtypeid = int(in.Int())
		case "lastSalePrice":
			out.LastSalePrice = int(in.Int())
		case "injuryType":
			out.InjuryType = string(in.String())
		case "injuryGames":
			out.InjuryGames = int(in.Int())
		case "preferredPosition":
			out.PreferredPosition = string(in.String())
		case "contract":
			out.Contract = int(in.Int())
		case "teamid":
			out.Teamid = int(in.Int())
		case "rareflag":
			out.Rareflag = int(in.Int())
		case "playStyle":
			out.PlayStyle = int(in.Int())
		case "leagueId":
			out.LeagueID = int(in.Int())
		case "assists":
			out.Assists = int(in.Int())
		case "lifetimeAssists":
			out.LifetimeAssists = int(in.Int())
		case "loyaltyBonus":
			out.LoyaltyBonus = int(in.Int())
		case "pile":
			if m, ok := out.Pile.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Pile.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Pile = in.Interface()
			}
		case "nation":
			out.Nation = int(in.Int())
		case "resourceGameYear":
			out.ResourceGameYear = int(in.Int())
		case "attributeArray":
			if in.IsNull() {
				in.Skip()
				out.AttributeArray = nil
			} else {
				in.Delim('[')
				if out.AttributeArray == nil {
					if !in.IsDelim(']') {
						out.AttributeArray = make([]int, 0, 8)
					} else {
						out.AttributeArray = []int{}
					}
				} else {
					out.AttributeArray = (out.AttributeArray)[:0]
				}
				for !in.IsDelim(']') {
					var v112 int
					v112 = int(in.Int())
					out.AttributeArray = append(out.AttributeArray, v112)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "statsArray":
			if in.IsNull() {
				in.Skip()
				out.StatsArray = nil
			} else {
				in.Delim('[')
				if out.StatsArray == nil {
					if !in.IsDelim(']') {
						out.StatsArray = make([]int, 0, 8)
					} else {
						out.StatsArray = []int{}
					}
				} else {
					out.StatsArray = (out.StatsArray)[:0]
				}
				for !in.IsDelim(']') {
					var v113 int
					v113 = int(in.Int())
					out.StatsArray = append(out.StatsArray, v113)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "lifetimeStatsArray":
			if in.IsNull() {
				in.Skip()
				out.LifetimeStatsArray = nil
			} else {
				in.Delim('[')
				if out.LifetimeStatsArray == nil {
					if !in.IsDelim(']') {
						out.LifetimeStatsArray = make([]int, 0, 8)
					} else {
						out.LifetimeStatsArray = []int{}
					}
				} else {
					out.LifetimeStatsArray = (out.LifetimeStatsArray)[:0]
				}
				for !in.IsDelim(']') {
					var v114 int
					v114 = int(in.Int())
					out.LifetimeStatsArray = append(out.LifetimeStatsArray, v114)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "skillmoves":
			out.Skillmoves = int(in.Int())
		case "weakfootabilitytypecode":
			out.Weakfootabilitytypecode = int(in.Int())
		case "attackingworkrate":
			out.Attackingworkrate = int(in.Int())
		case "defensiveworkrate":
			out.Defensiveworkrate = int(in.Int())
		case "preferredfoot":
			out.Preferredfoot = int(in.Int())
		case "possiblePositions":
			if in.IsNull() {
				in.Skip()
				out.PossiblePositions = nil
			} else {
				in.Delim('[')
				if out.PossiblePositions == nil {
					if !in.IsDelim(']') {
						out.PossiblePositions = make([]string, 0, 4)
					} else {
						out.PossiblePositions = []string{}
					}
				} else {
					out.PossiblePositions = (out.PossiblePositions)[:0]
				}
				for !in.IsDelim(']') {
					var v115 string
					v115 = string(in.String())
					out.PossiblePositions = append(out.PossiblePositions, v115)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "tradeId":
			out.TradeID = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComChris124567FifaApi44(out *jwriter.Writer, in ItemData) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != 0 {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.Int64(int64(in.ID))
	}
	if in.Timestamp != 0 {
		const prefix string = ",\"timestamp\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Timestamp))
	}
	if in.Formation != "" {
		const prefix string = ",\"formation\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Formation))
	}
	if in.Untradeable {
		const prefix string = ",\"untradeable\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Untradeable))
	}
	if in.AssetID != 0 {
		const prefix string = ",\"assetId\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.AssetID))
	}
	if in.Rating != 0 {
		const prefix string = ",\"rating\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Rating))
	}
	if in.ItemType != "" {
		const prefix string = ",\"itemType\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ItemType))
	}
	if in.ResourceID != 0 {
		const prefix string = ",\"resourceId\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.ResourceID))
	}
	if in.Owners != 0 {
		const prefix string = ",\"owners\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Owners))
	}
	if in.DiscardValue != 0 {
		const prefix string = ",\"discardValue\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.DiscardValue))
	}
	if in.ItemState != "" {
		const prefix string = ",\"itemState\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ItemState))
	}
	if in.Cardsubtypeid != 0 {
		const prefix string = ",\"cardsubtypeid\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Cardsubtypeid))
	}
	if in.LastSalePrice != 0 {
		const prefix string = ",\"lastSalePrice\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.LastSalePrice))
	}
	if in.InjuryType != "" {
		const prefix string = ",\"injuryType\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.InjuryType))
	}
	if in.InjuryGames != 0 {
		const prefix string = ",\"injuryGames\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.InjuryGames))
	}
	if in.PreferredPosition != "" {
		const prefix string = ",\"preferredPosition\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PreferredPosition))
	}
	if in.Contract != 0 {
		const prefix string = ",\"contract\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Contract))
	}
	if in.Teamid != 0 {
		const prefix string = ",\"teamid\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Teamid))
	}
	if in.Rareflag != 0 {
		const prefix string = ",\"rareflag\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Rareflag))
	}
	if in.PlayStyle != 0 {
		const prefix string = ",\"playStyle\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.PlayStyle))
	}
	if in.LeagueID != 0 {
		const prefix string = ",\"leagueId\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.LeagueID))
	}
	if in.Assists != 0 {
		const prefix string = ",\"assists\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Assists))
	}
	if in.LifetimeAssists != 0 {
		const prefix string = ",\"lifetimeAssists\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.LifetimeAssists))
	}
	if in.LoyaltyBonus != 0 {
		const prefix string = ",\"loyaltyBonus\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.LoyaltyBonus))
	}
	if in.Pile != nil {
		const prefix string = ",\"pile\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if m, ok := in.Pile.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Pile.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Pile))
		}
	}
	if in.Nation != 0 {
		const prefix string = ",\"nation\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Nation))
	}
	if in.ResourceGameYear != 0 {
		const prefix string = ",\"resourceGameYear\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.ResourceGameYear))
	}
	if len(in.AttributeArray) != 0 {
		const prefix string = ",\"attributeArray\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v116, v117 := range in.AttributeArray {
				if v116 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v117))
			}
			out.RawByte(']')
		}
	}
	if len(in.StatsArray) != 0 {
		const prefix string = ",\"statsArray\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v118, v119 := range in.StatsArray {
				if v118 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v119))
			}
			out.RawByte(']')
		}
	}
	if len(in.LifetimeStatsArray) != 0 {
		const prefix string = ",\"lifetimeStatsArray\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v120, v121 := range in.LifetimeStatsArray {
				if v120 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v121))
			}
			out.RawByte(']')
		}
	}
	if in.Skillmoves != 0 {
		const prefix string = ",\"skillmoves\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Skillmoves))
	}
	if in.Weakfootabilitytypecode != 0 {
		const prefix string = ",\"weakfootabilitytypecode\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Weakfootabilitytypecode))
	}
	if in.Attackingworkrate != 0 {
		const prefix string = ",\"attackingworkrate\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Attackingworkrate))
	}
	if in.Defensiveworkrate != 0 {
		const prefix string = ",\"defensiveworkrate\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Defensiveworkrate))
	}
	if in.Preferredfoot != 0 {
		const prefix string = ",\"preferredfoot\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Preferredfoot))
	}
	if len(in.PossiblePositions) != 0 {
		const prefix string = ",\"possiblePositions\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v122, v123 := range in.PossiblePositions {
				if v122 > 0 {
					out.RawByte(',')
				}
				out.String(string(v123))
			}
			out.RawByte(']')
		}
	}
	if in.TradeID != "" {
		const prefix string = ",\"tradeId\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.TradeID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ItemData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComChris124567FifaApi44(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ItemData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComChris124567FifaApi44(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ItemData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComChris124567FifaApi44(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ItemData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComChris124567FifaApi44(l, v)
}
func easyjson6601e8cdDecodeGithubComChris124567FifaApi45(in *jlexer.Lexer, out *Instructions) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "index":
			out.Index = int(in.Int())
		case "value":
			out.Value = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComChris124567FifaApi45(out *jwriter.Writer, in Instructions) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Index != 0 {
		const prefix string = ",\"index\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.Index))
	}
	if in.Value != 0 {
		const prefix string = ",\"value\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Value))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Instructions) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComChris124567FifaApi45(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Instructions) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComChris124567FifaApi45(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Instructions) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComChris124567FifaApi45(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Instructions) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComChris124567FifaApi45(l, v)
}
func easyjson6601e8cdDecodeGithubComChris124567FifaApi46(in *jlexer.Lexer, out *Feature) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "trade":
			out.Trade = int(in.Int())
		case "rivals":
			out.Rivals = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComChris124567FifaApi46(out *jwriter.Writer, in Feature) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Trade != 0 {
		const prefix string = ",\"trade\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.Trade))
	}
	if in.Rivals != 0 {
		const prefix string = ",\"rivals\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Rivals))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Feature) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComChris124567FifaApi46(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Feature) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComChris124567FifaApi46(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Feature) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComChris124567FifaApi46(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Feature) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComChris124567FifaApi46(l, v)
}
func easyjson6601e8cdDecodeGithubComChris124567FifaApi47(in *jlexer.Lexer, out *Errors) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComChris124567FifaApi47(out *jwriter.Writer, in Errors) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Errors) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComChris124567FifaApi47(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Errors) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComChris124567FifaApi47(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Errors) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComChris124567FifaApi47(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Errors) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComChris124567FifaApi47(l, v)
}
func easyjson6601e8cdDecodeGithubComChris124567FifaApi48(in *jlexer.Lexer, out *Entries) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "value":
			out.Value = int(in.Int())
		case "key":
			out.Key = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComChris124567FifaApi48(out *jwriter.Writer, in Entries) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Value != 0 {
		const prefix string = ",\"value\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.Value))
	}
	if in.Key != 0 {
		const prefix string = ",\"key\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Key))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Entries) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComChris124567FifaApi48(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Entries) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComChris124567FifaApi48(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Entries) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComChris124567FifaApi48(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Entries) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComChris124567FifaApi48(l, v)
}
func easyjson6601e8cdDecodeGithubComChris124567FifaApi49(in *jlexer.Lexer, out *DynamicObjectivesUpdates) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "needsGroupsRefresh":
			out.NeedsGroupsRefresh = bool(in.Bool())
		case "scmpCategoryProgressList":
			if in.IsNull() {
				in.Skip()
				out.ScmpCategoryProgressList = nil
			} else {
				in.Delim('[')
				if out.ScmpCategoryProgressList == nil {
					if !in.IsDelim(']') {
						out.ScmpCategoryProgressList = make([]ScmpCategoryProgressList, 0, 2)
					} else {
						out.ScmpCategoryProgressList = []ScmpCategoryProgressList{}
					}
				} else {
					out.ScmpCategoryProgressList = (out.ScmpCategoryProgressList)[:0]
				}
				for !in.IsDelim(']') {
					var v124 ScmpCategoryProgressList
					(v124).UnmarshalEasyJSON(in)
					out.ScmpCategoryProgressList = append(out.ScmpCategoryProgressList, v124)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "learningGroupProgressList":
			if in.IsNull() {
				in.Skip()
				out.LearningGroupProgressList = nil
			} else {
				in.Delim('[')
				if out.LearningGroupProgressList == nil {
					if !in.IsDelim(']') {
						out.LearningGroupProgressList = make([]LearningGroupProgressList, 0, 2)
					} else {
						out.LearningGroupProgressList = []LearningGroupProgressList{}
					}
				} else {
					out.LearningGroupProgressList = (out.LearningGroupProgressList)[:0]
				}
				for !in.IsDelim(']') {
					var v125 LearningGroupProgressList
					(v125).UnmarshalEasyJSON(in)
					out.LearningGroupProgressList = append(out.LearningGroupProgressList, v125)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "needsAutoClaim":
			out.NeedsAutoClaim = bool(in.Bool())
		case "needsMilestonesAutoClaim":
			out.NeedsMilestonesAutoClaim = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComChris124567FifaApi49(out *jwriter.Writer, in DynamicObjectivesUpdates) {
	out.RawByte('{')
	first := true
	_ = first
	if in.NeedsGroupsRefresh {
		const prefix string = ",\"needsGroupsRefresh\":"
		first = false
		out.RawString(prefix[1:])
		out.Bool(bool(in.NeedsGroupsRefresh))
	}
	if len(in.ScmpCategoryProgressList) != 0 {
		const prefix string = ",\"scmpCategoryProgressList\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v126, v127 := range in.ScmpCategoryProgressList {
				if v126 > 0 {
					out.RawByte(',')
				}
				(v127).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if len(in.LearningGroupProgressList) != 0 {
		const prefix string = ",\"learningGroupProgressList\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v128, v129 := range in.LearningGroupProgressList {
				if v128 > 0 {
					out.RawByte(',')
				}
				(v129).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if in.NeedsAutoClaim {
		const prefix string = ",\"needsAutoClaim\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.NeedsAutoClaim))
	}
	if in.NeedsMilestonesAutoClaim {
		const prefix string = ",\"needsMilestonesAutoClaim\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.NeedsMilestonesAutoClaim))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v DynamicObjectivesUpdates) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComChris124567FifaApi49(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DynamicObjectivesUpdates) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComChris124567FifaApi49(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DynamicObjectivesUpdates) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComChris124567FifaApi49(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DynamicObjectivesUpdates) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComChris124567FifaApi49(l, v)
}
func easyjson6601e8cdDecodeGithubComChris124567FifaApi50(in *jlexer.Lexer, out *Currencies) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "funds":
			out.Funds = int(in.Int())
		case "finalFunds":
			out.FinalFunds = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComChris124567FifaApi50(out *jwriter.Writer, in Currencies) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Name != "" {
		const prefix string = ",\"name\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	if in.Funds != 0 {
		const prefix string = ",\"funds\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Funds))
	}
	if in.FinalFunds != 0 {
		const prefix string = ",\"finalFunds\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.FinalFunds))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Currencies) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComChris124567FifaApi50(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Currencies) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComChris124567FifaApi50(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Currencies) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComChris124567FifaApi50(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Currencies) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComChris124567FifaApi50(l, v)
}
func easyjson6601e8cdDecodeGithubComChris124567FifaApi51(in *jlexer.Lexer, out *ConnectAuthResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "code":
			out.Code = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComChris124567FifaApi51(out *jwriter.Writer, in ConnectAuthResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"code\":"
		out.RawString(prefix[1:])
		out.String(string(in.Code))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ConnectAuthResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComChris124567FifaApi51(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ConnectAuthResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComChris124567FifaApi51(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ConnectAuthResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComChris124567FifaApi51(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ConnectAuthResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComChris124567FifaApi51(l, v)
}
func easyjson6601e8cdDecodeGithubComChris124567FifaApi52(in *jlexer.Lexer, out *Configs) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "value":
			out.Value = int(in.Int())
		case "type":
			out.Type = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComChris124567FifaApi52(out *jwriter.Writer, in Configs) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Value != 0 {
		const prefix string = ",\"value\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.Value))
	}
	if in.Type != "" {
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Type))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Configs) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComChris124567FifaApi52(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Configs) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComChris124567FifaApi52(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Configs) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComChris124567FifaApi52(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Configs) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComChris124567FifaApi52(l, v)
}
func easyjson6601e8cdDecodeGithubComChris124567FifaApi53(in *jlexer.Lexer, out *ClubUser) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "user":
			if in.IsNull() {
				in.Skip()
				out.User = nil
			} else {
				in.Delim('[')
				if out.User == nil {
					if !in.IsDelim(']') {
						out.User = make([]User, 0, 2)
					} else {
						out.User = []User{}
					}
				} else {
					out.User = (out.User)[:0]
				}
				for !in.IsDelim(']') {
					var v130 User
					(v130).UnmarshalEasyJSON(in)
					out.User = append(out.User, v130)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComChris124567FifaApi53(out *jwriter.Writer, in ClubUser) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.User) != 0 {
		const prefix string = ",\"user\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('[')
			for v131, v132 := range in.User {
				if v131 > 0 {
					out.RawByte(',')
				}
				(v132).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ClubUser) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComChris124567FifaApi53(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ClubUser) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComChris124567FifaApi53(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ClubUser) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComChris124567FifaApi53(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ClubUser) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComChris124567FifaApi53(l, v)
}
func easyjson6601e8cdDecodeGithubComChris124567FifaApi54(in *jlexer.Lexer, out *CaptchaValidateRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "funCaptchaToken":
			out.FunCaptchaToken = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComChris124567FifaApi54(out *jwriter.Writer, in CaptchaValidateRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"funCaptchaToken\":"
		out.RawString(prefix[1:])
		out.String(string(in.FunCaptchaToken))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CaptchaValidateRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComChris124567FifaApi54(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CaptchaValidateRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComChris124567FifaApi54(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CaptchaValidateRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComChris124567FifaApi54(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CaptchaValidateRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComChris124567FifaApi54(l, v)
}
func easyjson6601e8cdDecodeGithubComChris124567FifaApi55(in *jlexer.Lexer, out *CaptchaDataResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "blob":
			out.Blob = string(in.String())
		case "pk":
			out.Pk = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComChris124567FifaApi55(out *jwriter.Writer, in CaptchaDataResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"blob\":"
		out.RawString(prefix[1:])
		out.String(string(in.Blob))
	}
	{
		const prefix string = ",\"pk\":"
		out.RawString(prefix)
		out.String(string(in.Pk))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CaptchaDataResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComChris124567FifaApi55(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CaptchaDataResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComChris124567FifaApi55(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CaptchaDataResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComChris124567FifaApi55(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CaptchaDataResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComChris124567FifaApi55(l, v)
}
func easyjson6601e8cdDecodeGithubComChris124567FifaApi56(in *jlexer.Lexer, out *CampaignActiveResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "startTime":
			out.StartTime = int(in.Int())
		case "endTime":
			out.EndTime = int(in.Int())
		case "serverCrtTime":
			out.ServerCrtTime = int(in.Int())
		case "remainingRewards":
			out.RemainingRewards = int(in.Int())
		case "userXp":
			out.UserXp = int(in.Int())
		case "campaignBg":
			out.CampaignBg = string(in.String())
		case "campaignWidgetBg":
			out.CampaignWidgetBg = string(in.String())
		case "title":
			out.Title = string(in.String())
		case "nextCampaignStartTime":
			out.NextCampaignStartTime = int64(in.Int64())
		case "hasPreviousCampaign":
			out.HasPreviousCampaign = bool(in.Bool())
		case "needsAutoClaim":
			out.NeedsAutoClaim = bool(in.Bool())
		case "needsMilestonesAutoClaim":
			out.NeedsMilestonesAutoClaim = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComChris124567FifaApi56(out *jwriter.Writer, in CampaignActiveResponse) {
	out.RawByte('{')
	first := true
	_ = first
	if in.StartTime != 0 {
		const prefix string = ",\"startTime\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.StartTime))
	}
	if in.EndTime != 0 {
		const prefix string = ",\"endTime\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.EndTime))
	}
	if in.ServerCrtTime != 0 {
		const prefix string = ",\"serverCrtTime\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.ServerCrtTime))
	}
	if in.RemainingRewards != 0 {
		const prefix string = ",\"remainingRewards\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.RemainingRewards))
	}
	if in.UserXp != 0 {
		const prefix string = ",\"userXp\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.UserXp))
	}
	if in.CampaignBg != "" {
		const prefix string = ",\"campaignBg\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.CampaignBg))
	}
	if in.CampaignWidgetBg != "" {
		const prefix string = ",\"campaignWidgetBg\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.CampaignWidgetBg))
	}
	if in.Title != "" {
		const prefix string = ",\"title\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Title))
	}
	if in.NextCampaignStartTime != 0 {
		const prefix string = ",\"nextCampaignStartTime\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.NextCampaignStartTime))
	}
	if in.HasPreviousCampaign {
		const prefix string = ",\"hasPreviousCampaign\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.HasPreviousCampaign))
	}
	if in.NeedsAutoClaim {
		const prefix string = ",\"needsAutoClaim\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.NeedsAutoClaim))
	}
	if in.NeedsMilestonesAutoClaim {
		const prefix string = ",\"needsMilestonesAutoClaim\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.NeedsMilestonesAutoClaim))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CampaignActiveResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComChris124567FifaApi56(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CampaignActiveResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComChris124567FifaApi56(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CampaignActiveResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComChris124567FifaApi56(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CampaignActiveResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComChris124567FifaApi56(l, v)
}
func easyjson6601e8cdDecodeGithubComChris124567FifaApi57(in *jlexer.Lexer, out *BidTokens) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComChris124567FifaApi57(out *jwriter.Writer, in BidTokens) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BidTokens) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComChris124567FifaApi57(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BidTokens) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComChris124567FifaApi57(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BidTokens) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComChris124567FifaApi57(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BidTokens) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComChris124567FifaApi57(l, v)
}
func easyjson6601e8cdDecodeGithubComChris124567FifaApi58(in *jlexer.Lexer, out *BidResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "credits":
			out.Credits = int(in.Int())
		case "auctionInfo":
			if in.IsNull() {
				in.Skip()
				out.AuctionInfo = nil
			} else {
				in.Delim('[')
				if out.AuctionInfo == nil {
					if !in.IsDelim(']') {
						out.AuctionInfo = make([]AuctionInfo, 0, 0)
					} else {
						out.AuctionInfo = []AuctionInfo{}
					}
				} else {
					out.AuctionInfo = (out.AuctionInfo)[:0]
				}
				for !in.IsDelim(']') {
					var v133 AuctionInfo
					(v133).UnmarshalEasyJSON(in)
					out.AuctionInfo = append(out.AuctionInfo, v133)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "bidTokens":
			(out.BidTokens).UnmarshalEasyJSON(in)
		case "currencies":
			if in.IsNull() {
				in.Skip()
				out.Currencies = nil
			} else {
				in.Delim('[')
				if out.Currencies == nil {
					if !in.IsDelim(']') {
						out.Currencies = make([]Currencies, 0, 2)
					} else {
						out.Currencies = []Currencies{}
					}
				} else {
					out.Currencies = (out.Currencies)[:0]
				}
				for !in.IsDelim(']') {
					var v134 Currencies
					(v134).UnmarshalEasyJSON(in)
					out.Currencies = append(out.Currencies, v134)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComChris124567FifaApi58(out *jwriter.Writer, in BidResponse) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Credits != 0 {
		const prefix string = ",\"credits\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.Credits))
	}
	if len(in.AuctionInfo) != 0 {
		const prefix string = ",\"auctionInfo\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v135, v136 := range in.AuctionInfo {
				if v135 > 0 {
					out.RawByte(',')
				}
				(v136).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if true {
		const prefix string = ",\"bidTokens\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.BidTokens).MarshalEasyJSON(out)
	}
	if len(in.Currencies) != 0 {
		const prefix string = ",\"currencies\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v137, v138 := range in.Currencies {
				if v137 > 0 {
					out.RawByte(',')
				}
				(v138).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BidResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComChris124567FifaApi58(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BidResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComChris124567FifaApi58(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BidResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComChris124567FifaApi58(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BidResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComChris124567FifaApi58(l, v)
}
func easyjson6601e8cdDecodeGithubComChris124567FifaApi59(in *jlexer.Lexer, out *BidRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "bid":
			out.Bid = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComChris124567FifaApi59(out *jwriter.Writer, in BidRequest) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Bid != 0 {
		const prefix string = ",\"bid\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.Bid))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BidRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComChris124567FifaApi59(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BidRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComChris124567FifaApi59(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BidRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComChris124567FifaApi59(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BidRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComChris124567FifaApi59(l, v)
}
func easyjson6601e8cdDecodeGithubComChris124567FifaApi60(in *jlexer.Lexer, out *AuctionInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "tradeId":
			out.TradeID = int64(in.Int64())
		case "itemData":
			(out.ItemData).UnmarshalEasyJSON(in)
		case "tradeState":
			out.TradeState = string(in.String())
		case "buyNowPrice":
			out.BuyNowPrice = int(in.Int())
		case "currentBid":
			out.CurrentBid = int(in.Int())
		case "offers":
			out.Offers = int(in.Int())
		case "watched":
			out.Watched = bool(in.Bool())
		case "bidState":
			out.BidState = string(in.String())
		case "startingBid":
			out.StartingBid = int(in.Int())
		case "confidenceValue":
			out.ConfidenceValue = int(in.Int())
		case "expires":
			out.Expires = int(in.Int())
		case "sellerName":
			out.SellerName = string(in.String())
		case "sellerEstablished":
			out.SellerEstablished = int(in.Int())
		case "sellerId":
			out.SellerID = int(in.Int())
		case "tradeOwner":
			out.TradeOwner = bool(in.Bool())
		case "coinsProcessed":
			out.CoinsProcessed = int(in.Int())
		case "tradeIdStr":
			out.TradeIDStr = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComChris124567FifaApi60(out *jwriter.Writer, in AuctionInfo) {
	out.RawByte('{')
	first := true
	_ = first
	if in.TradeID != 0 {
		const prefix string = ",\"tradeId\":"
		first = false
		out.RawString(prefix[1:])
		out.Int64(int64(in.TradeID))
	}
	if true {
		const prefix string = ",\"itemData\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.ItemData).MarshalEasyJSON(out)
	}
	if in.TradeState != "" {
		const prefix string = ",\"tradeState\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.TradeState))
	}
	if in.BuyNowPrice != 0 {
		const prefix string = ",\"buyNowPrice\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.BuyNowPrice))
	}
	if in.CurrentBid != 0 {
		const prefix string = ",\"currentBid\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.CurrentBid))
	}
	if in.Offers != 0 {
		const prefix string = ",\"offers\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Offers))
	}
	if in.Watched {
		const prefix string = ",\"watched\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Watched))
	}
	if in.BidState != "" {
		const prefix string = ",\"bidState\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.BidState))
	}
	if in.StartingBid != 0 {
		const prefix string = ",\"startingBid\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.StartingBid))
	}
	if in.ConfidenceValue != 0 {
		const prefix string = ",\"confidenceValue\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.ConfidenceValue))
	}
	if in.Expires != 0 {
		const prefix string = ",\"expires\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Expires))
	}
	if in.SellerName != "" {
		const prefix string = ",\"sellerName\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.SellerName))
	}
	if in.SellerEstablished != 0 {
		const prefix string = ",\"sellerEstablished\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.SellerEstablished))
	}
	if in.SellerID != 0 {
		const prefix string = ",\"sellerId\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.SellerID))
	}
	if in.TradeOwner {
		const prefix string = ",\"tradeOwner\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.TradeOwner))
	}
	if in.CoinsProcessed != 0 {
		const prefix string = ",\"coinsProcessed\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.CoinsProcessed))
	}
	if in.TradeIDStr != "" {
		const prefix string = ",\"tradeIdStr\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.TradeIDStr))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AuctionInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComChris124567FifaApi60(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AuctionInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComChris124567FifaApi60(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AuctionInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComChris124567FifaApi60(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AuctionInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComChris124567FifaApi60(l, v)
}
func easyjson6601e8cdDecodeGithubComChris124567FifaApi61(in *jlexer.Lexer, out *AuctionHouseResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64())
		case "idStr":
			out.IDStr = string(in.String())
		case "dynamicObjectivesUpdates":
			(out.DynamicObjectivesUpdates).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComChris124567FifaApi61(out *jwriter.Writer, in AuctionHouseResponse) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != 0 {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.Int64(int64(in.ID))
	}
	if in.IDStr != "" {
		const prefix string = ",\"idStr\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.IDStr))
	}
	if true {
		const prefix string = ",\"dynamicObjectivesUpdates\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.DynamicObjectivesUpdates).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AuctionHouseResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComChris124567FifaApi61(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AuctionHouseResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComChris124567FifaApi61(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AuctionHouseResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComChris124567FifaApi61(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AuctionHouseResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComChris124567FifaApi61(l, v)
}
func easyjson6601e8cdDecodeGithubComChris124567FifaApi62(in *jlexer.Lexer, out *AuctionHouseRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "buyNowPrice":
			out.BuyNowPrice = int(in.Int())
		case "duration":
			out.Duration = int(in.Int())
		case "itemData":
			(out.ItemData).UnmarshalEasyJSON(in)
		case "startingBid":
			out.StartingBid = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComChris124567FifaApi62(out *jwriter.Writer, in AuctionHouseRequest) {
	out.RawByte('{')
	first := true
	_ = first
	if in.BuyNowPrice != 0 {
		const prefix string = ",\"buyNowPrice\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.BuyNowPrice))
	}
	if in.Duration != 0 {
		const prefix string = ",\"duration\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Duration))
	}
	if true {
		const prefix string = ",\"itemData\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.ItemData).MarshalEasyJSON(out)
	}
	if in.StartingBid != 0 {
		const prefix string = ",\"startingBid\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.StartingBid))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AuctionHouseRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComChris124567FifaApi62(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AuctionHouseRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComChris124567FifaApi62(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AuctionHouseRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComChris124567FifaApi62(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AuctionHouseRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComChris124567FifaApi62(l, v)
}
func easyjson6601e8cdDecodeGithubComChris124567FifaApi63(in *jlexer.Lexer, out *Attributes) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "style":
			out.Style = string(in.String())
		case "size":
			out.Size = string(in.String())
		case "alignment":
			out.Alignment = string(in.String())
		case "colour":
			out.Colour = string(in.String())
		case "highlightColour":
			out.HighlightColour = string(in.String())
		case "renderType":
			out.RenderType = string(in.String())
		case "countdownTime":
			out.CountdownTime = string(in.String())
		case "localId":
			out.LocalID = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComChris124567FifaApi63(out *jwriter.Writer, in Attributes) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Style != "" {
		const prefix string = ",\"style\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Style))
	}
	if in.Size != "" {
		const prefix string = ",\"size\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Size))
	}
	if in.Alignment != "" {
		const prefix string = ",\"alignment\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Alignment))
	}
	if in.Colour != "" {
		const prefix string = ",\"colour\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Colour))
	}
	if in.HighlightColour != "" {
		const prefix string = ",\"highlightColour\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.HighlightColour))
	}
	if in.RenderType != "" {
		const prefix string = ",\"renderType\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.RenderType))
	}
	if in.CountdownTime != "" {
		const prefix string = ",\"countdownTime\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.CountdownTime))
	}
	if in.LocalID != "" {
		const prefix string = ",\"localId\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.LocalID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Attributes) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComChris124567FifaApi63(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Attributes) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComChris124567FifaApi63(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Attributes) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComChris124567FifaApi63(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Attributes) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComChris124567FifaApi63(l, v)
}
func easyjson6601e8cdDecodeGithubComChris124567FifaApi64(in *jlexer.Lexer, out *Actives) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64())
		case "timestamp":
			out.Timestamp = int(in.Int())
		case "formation":
			out.Formation = string(in.String())
		case "untradeable":
			out.Untradeable = bool(in.Bool())
		case "assetId":
			out.AssetID = int(in.Int())
		case "rating":
			out.Rating = int(in.Int())
		case "itemType":
			out.ItemType = string(in.String())
		case "resourceId":
			out.ResourceID = int(in.Int())
		case "owners":
			out.Owners = int(in.Int())
		case "discardValue":
			out.DiscardValue = int(in.Int())
		case "itemState":
			out.ItemState = string(in.String())
		case "cardsubtypeid":
			out.Cardsubtypeid = int(in.Int())
		case "lastSalePrice":
			out.LastSalePrice = int(in.Int())
		case "statsList":
			if in.IsNull() {
				in.Skip()
				out.StatsList = nil
			} else {
				in.Delim('[')
				if out.StatsList == nil {
					if !in.IsDelim(']') {
						out.StatsList = make([]interface{}, 0, 4)
					} else {
						out.StatsList = []interface{}{}
					}
				} else {
					out.StatsList = (out.StatsList)[:0]
				}
				for !in.IsDelim(']') {
					var v139 interface{}
					if m, ok := v139.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v139.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v139 = in.Interface()
					}
					out.StatsList = append(out.StatsList, v139)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "lifetimeStats":
			if in.IsNull() {
				in.Skip()
				out.LifetimeStats = nil
			} else {
				in.Delim('[')
				if out.LifetimeStats == nil {
					if !in.IsDelim(']') {
						out.LifetimeStats = make([]interface{}, 0, 4)
					} else {
						out.LifetimeStats = []interface{}{}
					}
				} else {
					out.LifetimeStats = (out.LifetimeStats)[:0]
				}
				for !in.IsDelim(']') {
					var v140 interface{}
					if m, ok := v140.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v140.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v140 = in.Interface()
					}
					out.LifetimeStats = append(out.LifetimeStats, v140)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "attributeList":
			if in.IsNull() {
				in.Skip()
				out.AttributeList = nil
			} else {
				in.Delim('[')
				if out.AttributeList == nil {
					if !in.IsDelim(']') {
						out.AttributeList = make([]interface{}, 0, 4)
					} else {
						out.AttributeList = []interface{}{}
					}
				} else {
					out.AttributeList = (out.AttributeList)[:0]
				}
				for !in.IsDelim(']') {
					var v141 interface{}
					if m, ok := v141.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v141.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v141 = in.Interface()
					}
					out.AttributeList = append(out.AttributeList, v141)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "teamid":
			out.Teamid = int(in.Int())
		case "rareflag":
			out.Rareflag = int(in.Int())
		case "leagueId":
			out.LeagueID = int(in.Int())
		case "pile":
			out.Pile = int(in.Int())
		case "cardassetid":
			out.Cardassetid = int(in.Int())
		case "value":
			out.Value = int(in.Int())
		case "category":
			out.Category = int(in.Int())
		case "manufacturer":
			out.Manufacturer = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "resourceGameYear":
			out.ResourceGameYear = int(in.Int())
		case "authenticity":
			out.Authenticity = bool(in.Bool())
		case "year":
			out.Year = int(in.Int())
		case "isPlatformSpecific":
			out.IsPlatformSpecific = bool(in.Bool())
		case "description":
			out.Description = string(in.String())
		case "biodescription":
			out.Biodescription = string(in.String())
		case "stadiumid":
			out.Stadiumid = int(in.Int())
		case "capacity":
			out.Capacity = int(in.Int())
		case "tifoSupportType":
			out.TifoSupportType = int(in.Int())
		case "tifoRestricted":
			out.TifoRestricted = bool(in.Bool())
		case "bannerRestricted":
			out.BannerRestricted = bool(in.Bool())
		case "ballRestricted":
			out.BallRestricted = bool(in.Bool())
		case "preferredTime1":
			out.PreferredTime1 = int(in.Int())
		case "preferredTime2":
			out.PreferredTime2 = int(in.Int())
		case "preferredWeather":
			out.PreferredWeather = int(in.Int())
		case "undiscardable":
			out.Undiscardable = bool(in.Bool())
		case "tier":
			out.Tier = int(in.Int())
		case "myStadium":
			out.MyStadium = bool(in.Bool())
		case "attributeArray":
			if in.IsNull() {
				in.Skip()
				out.AttributeArray = nil
			} else {
				in.Delim('[')
				if out.AttributeArray == nil {
					if !in.IsDelim(']') {
						out.AttributeArray = make([]int, 0, 8)
					} else {
						out.AttributeArray = []int{}
					}
				} else {
					out.AttributeArray = (out.AttributeArray)[:0]
				}
				for !in.IsDelim(']') {
					var v142 int
					v142 = int(in.Int())
					out.AttributeArray = append(out.AttributeArray, v142)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "showCasePriority":
			out.ShowCasePriority = int(in.Int())
		case "weightrare":
			out.Weightrare = int(in.Int())
		case "header":
			out.Header = string(in.String())
		case "chantsCount":
			out.ChantsCount = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComChris124567FifaApi64(out *jwriter.Writer, in Actives) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != 0 {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.Int64(int64(in.ID))
	}
	if in.Timestamp != 0 {
		const prefix string = ",\"timestamp\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Timestamp))
	}
	if in.Formation != "" {
		const prefix string = ",\"formation\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Formation))
	}
	if in.Untradeable {
		const prefix string = ",\"untradeable\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Untradeable))
	}
	if in.AssetID != 0 {
		const prefix string = ",\"assetId\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.AssetID))
	}
	if in.Rating != 0 {
		const prefix string = ",\"rating\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Rating))
	}
	if in.ItemType != "" {
		const prefix string = ",\"itemType\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ItemType))
	}
	if in.ResourceID != 0 {
		const prefix string = ",\"resourceId\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.ResourceID))
	}
	if in.Owners != 0 {
		const prefix string = ",\"owners\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Owners))
	}
	if in.DiscardValue != 0 {
		const prefix string = ",\"discardValue\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.DiscardValue))
	}
	if in.ItemState != "" {
		const prefix string = ",\"itemState\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ItemState))
	}
	if in.Cardsubtypeid != 0 {
		const prefix string = ",\"cardsubtypeid\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Cardsubtypeid))
	}
	if in.LastSalePrice != 0 {
		const prefix string = ",\"lastSalePrice\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.LastSalePrice))
	}
	if len(in.StatsList) != 0 {
		const prefix string = ",\"statsList\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v143, v144 := range in.StatsList {
				if v143 > 0 {
					out.RawByte(',')
				}
				if m, ok := v144.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v144.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v144))
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.LifetimeStats) != 0 {
		const prefix string = ",\"lifetimeStats\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v145, v146 := range in.LifetimeStats {
				if v145 > 0 {
					out.RawByte(',')
				}
				if m, ok := v146.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v146.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v146))
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.AttributeList) != 0 {
		const prefix string = ",\"attributeList\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v147, v148 := range in.AttributeList {
				if v147 > 0 {
					out.RawByte(',')
				}
				if m, ok := v148.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v148.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v148))
				}
			}
			out.RawByte(']')
		}
	}
	if in.Teamid != 0 {
		const prefix string = ",\"teamid\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Teamid))
	}
	if in.Rareflag != 0 {
		const prefix string = ",\"rareflag\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Rareflag))
	}
	if in.LeagueID != 0 {
		const prefix string = ",\"leagueId\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.LeagueID))
	}
	if in.Pile != 0 {
		const prefix string = ",\"pile\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Pile))
	}
	if in.Cardassetid != 0 {
		const prefix string = ",\"cardassetid\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Cardassetid))
	}
	if in.Value != 0 {
		const prefix string = ",\"value\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Value))
	}
	if in.Category != 0 {
		const prefix string = ",\"category\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Category))
	}
	if in.Manufacturer != "" {
		const prefix string = ",\"manufacturer\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Manufacturer))
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	if in.ResourceGameYear != 0 {
		const prefix string = ",\"resourceGameYear\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.ResourceGameYear))
	}
	if in.Authenticity {
		const prefix string = ",\"authenticity\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Authenticity))
	}
	if in.Year != 0 {
		const prefix string = ",\"year\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Year))
	}
	if in.IsPlatformSpecific {
		const prefix string = ",\"isPlatformSpecific\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.IsPlatformSpecific))
	}
	if in.Description != "" {
		const prefix string = ",\"description\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Description))
	}
	if in.Biodescription != "" {
		const prefix string = ",\"biodescription\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Biodescription))
	}
	if in.Stadiumid != 0 {
		const prefix string = ",\"stadiumid\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Stadiumid))
	}
	if in.Capacity != 0 {
		const prefix string = ",\"capacity\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Capacity))
	}
	if in.TifoSupportType != 0 {
		const prefix string = ",\"tifoSupportType\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.TifoSupportType))
	}
	if in.TifoRestricted {
		const prefix string = ",\"tifoRestricted\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.TifoRestricted))
	}
	if in.BannerRestricted {
		const prefix string = ",\"bannerRestricted\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.BannerRestricted))
	}
	if in.BallRestricted {
		const prefix string = ",\"ballRestricted\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.BallRestricted))
	}
	if in.PreferredTime1 != 0 {
		const prefix string = ",\"preferredTime1\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.PreferredTime1))
	}
	if in.PreferredTime2 != 0 {
		const prefix string = ",\"preferredTime2\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.PreferredTime2))
	}
	if in.PreferredWeather != 0 {
		const prefix string = ",\"preferredWeather\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.PreferredWeather))
	}
	if in.Undiscardable {
		const prefix string = ",\"undiscardable\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Undiscardable))
	}
	if in.Tier != 0 {
		const prefix string = ",\"tier\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Tier))
	}
	if in.MyStadium {
		const prefix string = ",\"myStadium\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.MyStadium))
	}
	if len(in.AttributeArray) != 0 {
		const prefix string = ",\"attributeArray\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v149, v150 := range in.AttributeArray {
				if v149 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v150))
			}
			out.RawByte(']')
		}
	}
	if in.ShowCasePriority != 0 {
		const prefix string = ",\"showCasePriority\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.ShowCasePriority))
	}
	if in.Weightrare != 0 {
		const prefix string = ",\"weightrare\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Weightrare))
	}
	if in.Header != "" {
		const prefix string = ",\"header\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Header))
	}
	if in.ChantsCount != 0 {
		const prefix string = ",\"chantsCount\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.ChantsCount))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Actives) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComChris124567FifaApi64(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Actives) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComChris124567FifaApi64(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Actives) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComChris124567FifaApi64(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Actives) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComChris124567FifaApi64(l, v)
}
func easyjson6601e8cdDecodeGithubComChris124567FifaApi65(in *jlexer.Lexer, out *ActiveMessages) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "activeMessage":
			if in.IsNull() {
				in.Skip()
				out.ActiveMessage = nil
			} else {
				in.Delim('[')
				if out.ActiveMessage == nil {
					if !in.IsDelim(']') {
						out.ActiveMessage = make([]interface{}, 0, 4)
					} else {
						out.ActiveMessage = []interface{}{}
					}
				} else {
					out.ActiveMessage = (out.ActiveMessage)[:0]
				}
				for !in.IsDelim(']') {
					var v151 interface{}
					if m, ok := v151.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v151.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v151 = in.Interface()
					}
					out.ActiveMessage = append(out.ActiveMessage, v151)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComChris124567FifaApi65(out *jwriter.Writer, in ActiveMessages) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.ActiveMessage) != 0 {
		const prefix string = ",\"activeMessage\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('[')
			for v152, v153 := range in.ActiveMessage {
				if v152 > 0 {
					out.RawByte(',')
				}
				if m, ok := v153.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v153.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v153))
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ActiveMessages) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComChris124567FifaApi65(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ActiveMessages) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComChris124567FifaApi65(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ActiveMessages) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComChris124567FifaApi65(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ActiveMessages) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComChris124567FifaApi65(l, v)
}
